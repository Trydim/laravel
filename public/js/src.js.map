{"version":3,"file":"js/src.js","mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,IAAI,8BAA8B,QAAQ,IAAI,WAAW;AACzF;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1Ga;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,kDAAkD;AAClD,kDAAkD;AAClD,kDAAkD;AAClD,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD,mCAAmC,uBAAuB;AAC1D;AACA,wBAAwB,oBAAoB;AAC5C,2CAA2C,IAAI,IAAI,OAAO,EAAE,QAAQ;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS,UAAU,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjFa;AACb;AACuB;AACvB;AAC6B;AACD;AAC5B;AACA;AACA;AACA,kBAAkB;AAClB;AACO,yBAAyB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,+DAA+D,KAAK;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,YAAY;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iDAAW;AACpD;AACA,MAAM,iDAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iDAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,YAAY;AAChG;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA,aAAa,QAAQ;AACrB,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,aAAa,wCAAwC;AACrD;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,GAAG;AAChE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,SAAS;AACtB,cAAc;AACd;AACA;AACA,2DAA2D,GAAG;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7La;AACb;AACuB;AACvB;AACA;AACO;AACP;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,mCAAmC,yBAAyB,6BAA6B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,iCAAiC,GAAG;AACrK;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0CAA0C;AACjF,6BAA6B,UAAU;AACvC;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5OA;AACA;AACA;AAC6B;AACD;AACC;AAC7B;AACA;AACO;AACP,mEAAmE;AACnE,4CAA4C,0CAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oBAAoB,wBAAwB,eAAewCAAwC,gCAAgC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,2EAA2E,WAAW;AACtF;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4CAAK;AACT;AACA,KAAK;AACL;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,SAAS;AACT,+BAA+B;AAC/B,iCAAiC;AACjC;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2CAA2C;AAChF;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D,kCAAkC,6BAA6B;AAC/D,gCAAgC,6BAA6B;AAC7D,gCAAgC,gCAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4CAAM;AACZ;AACA,MAAM;AACN,MAAM,4CAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,sFAAsF,WAAW;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB;AACpB;AACA,UAAU;AACV,gBAAgB,0CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4CAAM;AACZ;AACA;AACA,MAAM,iDAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4CAAM;AACZ,MAAM;AACN;AACA,MAAM,4CAAM;AACZ;AACA;AACA;AACA;AACA;AACA,MAAM,4CAAM;AACZ,MAAM;AACN;AACA,MAAM,4CAAM;AACZ;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,6BAA6B,KAAK;AAClC,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,sBAAsB,kEAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,sBAAsB,kEAA2B;AACjD,SAAS,+BAA+B;AACxC,iCAAiC,UAAU,GAAG,UAAU,GAAG,QAAQ;AACnE;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,oBAAoB,EAAE;AACtB,mBAAmB;AACnB;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAM,EAAE,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtwBa;AACb;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5C6B;AACA;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAO;AACrB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,aAAa,iDAAU;AACvB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,6BAA6B,iDAAU;AACvC;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA,oBAAoB,iDAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,sBAAsB;AACtB,cAAc;AACd;AACA,oBAAoB,8BAA8B,6EAA6E;AAC/H;AACA;AACA;AACA,sBAAsB;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,sFAAsF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,0CAA0C,+DAAwB;AAClE,GAAG,GAAG;AACN;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,uCAAuC,+DAAwB;AAC/D,GAAG,GAAG;AACN;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D,uFAAuF;AACvF,GAAG;AACH;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,MAAM;AAC7C,2EAA2E,aAAa,cAAc;AACtG,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,kDAAkD,IAAI;AACtD;AACA;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAA0D;AAC3F,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA,gFAAgF,EAAE,2BAA2B,EAAE;AAC/G;AACA;AACA,wFAAwF;AACxF;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wEAAwE;AAC7F;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C;AAC/C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,+CAA+C;AAC/C,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,MAAM;AACN;AACA,iCAAiC;AACjC;AACA;AACA,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iEAA0B;AACrD;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,UAAU;AACV,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAA0B;AAClD;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,+BAA+B,2DAAoB;AACnD,GAAG;AACH;AACA;AACA,kCAAkC,2DAAoB;AACtD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK,WAAW,KAAK,WAAW,KAAK;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA,iCAAiC,4CAA4C,gBAAgB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAM,EAAE,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,SAAS;AACT;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,sBAAsB;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA,+DAA+D,sBAAsB,SAAS;AAC9F;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA,GAAG;AACH;AACA;AACO,8BAA8B,wCAAC;;;;;;;;;;;;;;;;ACxgBT;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAqE,QAAQ;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA,qBAAqB,sCAAsC,gBAAgB,8CAAO,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB,4BAA4B;AACxD,mBAAmB,0BAA0B;AAC7C;AACO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS,MAAM,sDAAe,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,UAAU,MAAM,sDAAe,sBAAsB;AACrD;AACA;;;;;;;;;;;;;;;ACrEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;;;;;;;SCxCA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;;;;;;;;ACNa;AACb;AAC2B;AAC3B;AACwC;AACD;AACvC;AACoD;AACL;AACH;AACc;AACJ;AACE;AACf;AACzC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc,uDAAK;AACnB,cAAc,2DAAY;AAC1B,6BAA6B,iEAAU;AACvC;AACA,gBAAgB,8DAAe;AAC/B;AACA,cAAc,+DAAgB;AAC9B;AACA;AACA;AACA;AACA,yBAAyB,uEAAwB;AACjD;AACA;AACA;AACA;AACA,gBAAgB,qEAAY;AAC5B;AACA;AACA;AACA;AACA,cAAc,gEAAiB;AAC/B;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB;AACA,mBAAmB,qEAAsB;AACzC;AACA,cAAc,gEAAiB;AAC/B;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,eAAe,iEAAkB;AACjC;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAW;AAC1B;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA,4DAA4D,kEAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iCAAiC,8BAA8B;AAC/D;AACA,OAAO;AACP;AACA;AACA;AACA,yBAAyB,mDAAC,KAAK,kDAAC","sources":["webpack://my-webpack-project/./css/style.scss?75fc","webpack://my-webpack-project/./js/components/_modal.scss?3dc0","webpack://my-webpack-project/./js/components/_valid.scss?f462","webpack://my-webpack-project/./js/components/CustomSelect.js","webpack://my-webpack-project/./js/components/Debugger.js","webpack://my-webpack-project/./js/components/Modal.js","webpack://my-webpack-project/./js/components/SelectedRow.js","webpack://my-webpack-project/./js/components/Valid.js","webpack://my-webpack-project/./js/components/component.js","webpack://my-webpack-project/./js/components/const.js","webpack://my-webpack-project/./js/components/func.js","webpack://my-webpack-project/./js/components/query.js","webpack://my-webpack-project/./js/components/shadownode.js","webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/webpack/runtime/define property getters","webpack://my-webpack-project/webpack/runtime/hasOwnProperty shorthand","webpack://my-webpack-project/webpack/runtime/make namespace object","webpack://my-webpack-project/./js/src.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","const getTemplate = (data = [], placeholder, selectedId) => {\r\n  let text = placeholder ?? 'Placeholder по умолчанию';\r\n\r\n  const items = data.map(item => {\r\n    let cls = '';\r\n    if (item.id === selectedId) {\r\n      text = item.value;\r\n      cls = 'selected';\r\n    }\r\n    return `\r\n      <li class=\"select__item ${cls}\" data-type=\"item\" data-id=\"${item.id}\">${item.value}</li>\r\n    `;\r\n  });\r\n\r\n  return `\r\n    <div class=\"select__backdrop\" data-type=\"backdrop\"></div>\r\n    <div class=\"select__input\" data-type=\"input\">\r\n      <span data-type=\"value\">${text}</span>\r\n      <i class=\"fa fa-chevron-down\" data-type=\"arrow\"></i>\r\n    </div>\r\n    <div class=\"select__dropdown\">\r\n      <ul class=\"select__list\">\r\n        ${items.join('')}\r\n      </ul>\r\n    </div>\r\n  `;\r\n}\r\n\r\nexport class CustomSelect {\r\n  constructor(selector, options) {\r\n    this.$el = document.querySelector(selector);\r\n    this.options = options;\r\n    this.selectedId = options.selectedId;\r\n\r\n    this.render();\r\n    this.setup();\r\n  }\r\n\r\n  render() {\r\n    const {placeholder, data} = this.options;\r\n    this.$el.classList.add('select');\r\n    this.$el.innerHTML = getTemplate(data, placeholder, this.selectedId);\r\n  }\r\n\r\n  setup() {\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n    this.$el.addEventListener('click', this.clickHandler);\r\n    this.$arrow = this.$el.querySelector('[data-type=\"arrow\"]');\r\n    this.$value = this.$el.querySelector('[data-type=\"value\"]');\r\n  }\r\n\r\n  clickHandler(event) {\r\n    const {type} = event.target.dataset;\r\n\r\n    if (type === 'input') {\r\n      this.toggle();\r\n    } else if (type === 'item') {\r\n      const id = event.target.dataset.id;\r\n      this.select(id);\r\n    } else if (type === 'backdrop') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  get isOpen() {\r\n    return this.$el.classList.contains('open');\r\n  }\r\n\r\n  get current() {\r\n    return this.options.data.find(item => item.id === this.selectedId);\r\n  }\r\n\r\n  select(id) {\r\n    this.selectedId = id;\r\n    this.$value.textContent = this.current.value;\r\n\r\n    this.$el.querySelectorAll('[data-type=\"item\"]').forEach(el => {\r\n      el.classList.remove('selected');\r\n    })\r\n    this.$el.querySelector(`[data-id=\"${id}\"]`).classList.add('selected');\r\n\r\n    this.options.onSelect ? this.options.onSelect(this.current) : null;\r\n\r\n    this.close();\r\n  }\r\n\r\n  toggle() {\r\n    this.isOpen ? this.close() : this.open();\r\n  }\r\n\r\n  open() {\r\n    this.$el.classList.add('open');\r\n    this.$arrow.classList.remove('fa-chevron-down');\r\n    this.$arrow.classList.add('fa-chevron-up');\r\n  }\r\n\r\n  close() {\r\n    this.$el.classList.remove('open');\r\n    this.$arrow.classList.add('fa-chevron-down');\r\n    this.$arrow.classList.remove('fa-chevron-up');\r\n  }\r\n\r\n  destroy() {\r\n    this.$el.removeEventListener('click', this.clickHandler);\r\n    this.$el.innerHTML = '';\r\n  }\r\n}\r\n","'use strict';\r\n\r\nexport class Debugger {\r\n  /**\r\n   *\r\n   * @param param\r\n   */\r\n  constructor(param = Object.create(null)) {\r\n    const {\r\n      fieldSelector,\r\n      fieldNode,\r\n    } = param;\r\n\r\n    this.field       = fieldSelector ? document.querySelector(fieldSelector) : fieldNode;\r\n    this.showEach    = param.showEach || false;   // Show each added value\r\n    this.showConsole = param.showConsole || true; // Show result to console\r\n    this.showDom     = param.showDom || false;    // Output result to Dom\r\n    this.showTrace   = param.showConsole || false;// add Trace\r\n\r\n    this.clear();\r\n  }\r\n\r\n  clear() {\r\n    this.dataArr = [];\r\n    this.data    = new Map();\r\n  }\r\n\r\n  setShowEach(flag) {\r\n    this.showEach = flag ? flag : true;\r\n  }\r\n\r\n  add(...param) {\r\n    const [key, value, comment = ''] = param;\r\n\r\n    if (Array.isArray(key)) { this.addAsArray(key); return this;}\r\n    if (typeof key === 'object') { this.addAsObject(key); return this;}\r\n\r\n    this.data.set(key, {key, value, comment});\r\n    this.dataArr.push(f.replaceTemplate('${key}: ${value} ${comment}', this.data.get(key)));\r\n    return this;\r\n  }\r\n  addAsArray(arr) {\r\n    arr.forEach(i => this.add(...i));\r\n    return this;\r\n  }\r\n  addAsObject(obj) {\r\n    Object.entries(obj).forEach(([k, v]) => this.add(k, v));\r\n    return this;\r\n  }\r\n\r\n  getTable() {\r\n    console.table([...this.data.values()]);\r\n  }\r\n\r\n  getObject() {\r\n    return this.data;\r\n  }\r\n\r\n  show() {\r\n    const node = this.getWrap();\r\n    node.innerHTML = this.dataArr.map(i => `<div>${i}</div>`).join('');\r\n\r\n    document.body.append(node);\r\n  }\r\n\r\n  getWrap() {\r\n    const node = document.createElement('div'),\r\n          btn = document.createElement('input');\r\n    node.style.cssText = 'position: fixed; left: 0; right: 0; bottom: 0; background: white';\r\n\r\n    btn.type = 'button';\r\n    btn.value = 'x';\r\n    btn.addEventListener('click', () => node.remove());\r\n\r\n    node.append(btn);\r\n    return node;\r\n  }\r\n\r\n  getTemplate() {\r\n    return `<div style=\"\"></div>`;\r\n  }\r\n}\r\n","'use strict';\r\n\r\nimport './_modal.scss';\r\n\r\nimport {c} from \"./const.js\";\r\nimport {f} from \"./func.js\";\r\n\r\n/**\r\n * Модальное окно\r\n * @param param {{modalId: string, template: string, showDefaultButton: boolean, btnConfig: boolean}}\r\n  */\r\nexport const Modal = (param = {}) => {\r\n  let modal = Object.create(null),\r\n      data = Object.create(null),\r\n      {\r\n        modalId = 'adminPopup',\r\n        template = '',\r\n        showDefaultButton = true,\r\n        btnConfig = false,\r\n      } = param;\r\n\r\n  const findNode = (n, role) => n.querySelector(`[data-role=\"${role}\"]`);\r\n\r\n  modal.bindBtn = function () {\r\n    this.wrap.querySelectorAll('.close-modal, .confirmYes, .closeBtn')\r\n        .forEach(n => n.addEventListener('click', () => this.hide()));\r\n  }\r\n  modal.btnConfig = function (key, param = Object.create(null)) {\r\n    let node = this.wrap.querySelector('.' + key.replace('.', ''));\r\n    node && param && Object.entries(param).forEach(([k, v]) => {node[k] = v});\r\n  }\r\n  modal.onEvent = function () {\r\n    let func = function (e) {\r\n      if (e.key === 'Escape') {\r\n        modal.hide();\r\n        document.removeEventListener('keyup', func);\r\n      }\r\n    }\r\n    document.addEventListener('keyup', func);\r\n  }\r\n  modal.querySelector = function (selector) { return this.wrap.querySelector(selector) }\r\n  modal.querySelectorAll = function (selector) { return this.wrap.querySelectorAll(selector) }\r\n\r\n  /**\r\n   * Show modal window\r\n   * @param title Nodes | string[]\r\n   * @param content Nodes | string[]\r\n   */\r\n  modal.show = function (title, content = '') {\r\n    this.title && title !== undefined && f.eraseNode(this.title).append(title);\r\n    if (this.content && content) {\r\n      f.eraseNode(this.content);\r\n      typeof content === 'string' ? this.content.insertAdjacentHTML('afterbegin', content)\r\n                                  : this.content.append(content);\r\n    }\r\n\r\n    data.bodyOver = document.body.style.overflow;\r\n    data.scrollY = Math.max(window.scrollY, window.pageYOffset, document.body.scrollTop);\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    if (document.documentElement.getBoundingClientRect().height > window.innerHeight && window.innerWidth > 800) {\r\n      data.bodyPaddingRight = document.body.style.paddingRight;\r\n      document.body.style.paddingRight = '16px';\r\n    }\r\n\r\n    this.wrap.style.display = 'flex';\r\n    this.wrap.classList.add('active');\r\n    this.window.classList.add('active');\r\n    modal.onEvent();\r\n  }\r\n\r\n  modal.hide = function () {\r\n    this.wrap.classList.remove('active');\r\n    this.window.classList.remove('active');\r\n\r\n    setTimeout( () => {\r\n      this.wrap.style.display = 'none';\r\n      document.body.style.overflow = data.bodyOver || 'initial';\r\n      document.body.style.cssText = 'scroll-behavior: initial';\r\n      window.scrollTo(0, data.scrollY);\r\n      document.body.style.cssText = '';\r\n      //document.body.style.scrollBehavior = 'smooth';\r\n      if (document.body.scrollHeight > window.innerHeight)\r\n        document.body.style.paddingRight = data.bodyPaddingRight || 'initial';\r\n    }, 300);\r\n    //c.eraseNode(modal.content);\r\n  }\r\n\r\n  modal.destroy = function () {\r\n    this.hide();\r\n    this.wrap.querySelectorAll('.close-modal, .confirmYes, .closeBtn')\r\n        .forEach(n => n.removeEventListener('click', () => this.hide()));\r\n    this.wrap.remove();\r\n  }\r\n\r\n  modal.setTemplate = function () {\r\n    const node = document.createElement('div');\r\n    node.insertAdjacentHTML('afterbegin', template || templatePopup());\r\n\r\n    this.wrap     = node.children[0];\r\n    this.window   = findNode(node, 'window');\r\n    this.title    = findNode(node, 'title');\r\n    this.content  = findNode(node, 'content');\r\n    this.btnField = findNode(node, 'bottomFieldBtn');\r\n\r\n    if (btnConfig) this.btnConfig(btnConfig);\r\n    else this.btnField && !showDefaultButton && f.eraseNode(this.btnField);\r\n\r\n    let btnY = this.wrap.querySelector('.confirmYes, [data-action=\"confirmYes\"], [data-target=\"confirmBtn\"]'),\r\n        btnN = this.wrap.querySelector('.closeBtn, [data-action=\"confirmNo\"], [data-target=\"cancelBtn\"]');\r\n    btnY && (this.btnConfirm = btnY);\r\n    btnN && (this.btnCancel = btnN);\r\n\r\n    //document.head.insertAdjacentHTML('beforeend', `<link rel=\"stylesheet\" href=\"${c.SITE_PATH}core/assets/css/libs/modal.css\">`);\r\n    document.body.append(node.children[0]);\r\n  }\r\n\r\n  const templatePopup = () => {\r\n    return `\r\n    <div class=\"modal-overlay\" id=\"${modalId}\">\r\n      <div class=\"modal p-3\" data-role=\"window\">\r\n        <button type=\"button\" class=\"close-modal\">\r\n          <div class=\"close-icon\"></div>\r\n        </button>\r\n        <div class=\"modal-title\" data-role=\"title\">Title</div>\r\n        <div class=\"w-100 pt-20\" data-role=\"content\"></div>\r\n        <div class=\"modal-button\" data-role=\"bottomFieldBtn\">\r\n          <input type=\"button\" class=\"confirmYes btn btn-success\" value=\"Подтвердить\" data-action=\"confirmYes\">\r\n          <input type=\"button\" class=\"closeBtn btn btn-warning\" value=\"Отмена\" data-action=\"confirmNo\">\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  modal.setTemplate();\r\n  //btnConfig && modal.btnConfig(btnConfig);\r\n  modal.bindBtn();\r\n\r\n  return modal;\r\n}\r\n","// TODO сохранять в сессии потом, что бы можно было перезагрузить страницу\r\n\r\nclass SelectedId {\r\n  constructor(key) {\r\n    this.key = key;\r\n    this.id = new Set();\r\n  }\r\n\r\n  add(id) {\r\n    if (!Array.isArray(id)) id = [id];\r\n    id.forEach(id => this.id.add(id));\r\n    this.fire();\r\n    return this;\r\n  }\r\n\r\n  delete(id) {\r\n    this.id.delete(id);\r\n    this.fire();\r\n    return this;\r\n  }\r\n\r\n  clear() {\r\n    this.id = new Set();\r\n    this.fire();\r\n    return this;\r\n  }\r\n\r\n  get size() {\r\n    return this.id.size;\r\n  }\r\n\r\n  getAsArray() {\r\n    let ids = [];\r\n    for (let id of this.id.values()) ids.push(id);\r\n    return ids;\r\n  }\r\n\r\n  forEach(func) {\r\n    this.id.forEach(func);\r\n  }\r\n\r\n  fire() {\r\n    this.timeOut && clearTimeout(this.timeOut);\r\n    this.timeOut = setTimeout(() => {\r\n      clearTimeout(this.timeOut);\r\n      f.observer.fire(this.key, this.getAsArray(), this.size);\r\n    }, 10);\r\n  }\r\n}\r\n\r\nexport class SelectedRow {\r\n  /**\r\n   * @param {object} param\r\n   * @param {HTMLElement} param.table\r\n   */\r\n  constructor(param) {\r\n    let {\r\n      table = f.qS('#table'),\r\n      //selectedField = f.qS('#')\r\n    } = param;\r\n\r\n\r\n    if (!table) return;\r\n    this.table = table;\r\n    this.observerKey = 'selected' + (Math.random() * 10000 | 0);\r\n    this.setSelectedId();\r\n    this.onTableMutator();\r\n    this.onTableEvent();\r\n    f.observer.addArgument(this.observerKey, this);\r\n  }\r\n\r\n  setSelectedId() {\r\n    this.selectedId = new SelectedId(this.observerKey);\r\n  }\r\n  clear() {\r\n    this.checkedRows(false);\r\n    this.selectedId.clear();\r\n  }\r\n  add(id) {\r\n    this.selectedId.add(id);\r\n    return this;\r\n  }\r\n  remove(id) {\r\n    this.selectedId.delete(id);\r\n    return this;\r\n  }\r\n\r\n  // Observer func\r\n  /**\r\n   * @return {string} - use observerKey in fire function as name\r\n   */\r\n  getObserverKey() {\r\n    return this.observerKey;\r\n  }\r\n  /**\r\n   * @param {function(string[], int, , SelectedRow)} func - fired function(selectedIds, count, any, SelectedRow)\r\n   *\r\n   * @param {any} arg - add argument\r\n   */\r\n  subscribe(func, ...arg) {\r\n    f.observer.subscribe(this.observerKey, (selectedIds, b, c) => func(selectedIds, b, ...arg, c));\r\n  }\r\n\r\n  getSelected() {\r\n    return this.selectedId.getAsArray();\r\n  }\r\n  getSelectedSize() {\r\n    return this.selectedId.size;\r\n  }\r\n\r\n  // Выделить выбранные строки\r\n  checkedRows(check = true) {\r\n    this.selectedId.forEach(id => {\r\n      let input = this.table.querySelector(`input[data-id=\"${id}\"]`);\r\n      input && (input.checked = check);\r\n    });\r\n  }\r\n\r\n  checkedAll() {\r\n    this.table.querySelectorAll(`input[data-id]`)\r\n        .forEach(i => {\r\n          this.add(i.dataset.id);\r\n          i.checked = true;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * @param {string|id} id\r\n   * @param {boolean} check\r\n   * @return {SelectedRow}\r\n   */\r\n  checkedById(id, check = true) {\r\n    let input = this.table.querySelector(`input[data-id=\"${id}\"]`);\r\n    input && (input.checked = check);\r\n    this.remove(id);\r\n    return this;\r\n  }\r\n\r\n  handle() {\r\n    this.checkedRows();\r\n  }\r\n\r\n  onTableMutator() {\r\n    const observer = new MutationObserver(this.handle.bind(this));\r\n\r\n    observer.observe(this.table, {\r\n      childList: true,\r\n      subtree: true,\r\n    });\r\n  }\r\n\r\n  // Event function\r\n  mouseOver(e) {\r\n    let tr = e.target.closest('tr');\r\n    if (e.buttons) tr.classList.add('mouseSelected');\r\n    else if (tr.classList.contains('mouseSelected')) tr.classList.remove('mouseSelected')\r\n  }\r\n  mouseDown(e) {\r\n    let tr = e.target.closest('tr');\r\n    this.startClick = tr && tr.rowIndex;\r\n  }\r\n  mouseUp(e) {\r\n    let tr = e.target.closest('tr');\r\n    if (!tr) return;\r\n    let finishClick = tr.rowIndex,\r\n        start = Math.min(this.startClick, finishClick),\r\n        finish = Math.max(this.startClick, finishClick);\r\n\r\n    for (let i = start; i <= finish; i++) {\r\n      let input = this.table.rows[i].querySelector('input'),\r\n          id = input && input.dataset.id;\r\n\r\n      if (!input || !id) return;\r\n      input.checked = !input.checked;\r\n      input.checked ? this.add(id) : this.remove(id);\r\n    }\r\n\r\n    delete this.startClick;\r\n    this.table.querySelectorAll('.mouseSelected')\r\n        .forEach(tr => tr.classList.remove('mouseSelected'));\r\n  }\r\n\r\n  // Bind event\r\n  onTableEvent() {\r\n    this.table.addEventListener('mouseover', e => this.mouseOver(e));\r\n    this.table.addEventListener('mousedown', e => this.mouseDown(e));\r\n    this.table.addEventListener('mouseup', e => this.mouseUp(e));\r\n    this.table.addEventListener('click', e => e.preventDefault());\r\n  }\r\n}\r\n","'use strict';\r\n\r\nimport './_valid.scss';\r\n\r\n// Валидация\r\nexport class Valid {\r\n  constructor(param) {\r\n    let {\r\n          sendFunc = () => {},\r\n          formNode = false,\r\n          formSelector = '#authForm',\r\n          submitNode = false,\r\n          submitSelector = '#btnConfirmSend',\r\n          fileFieldSelector = false, // Если поля не будет тогда просто after\r\n          initMask = true,\r\n          phoneMask = false,\r\n        } = param;\r\n\r\n    this.valid = new Set();\r\n    try {\r\n      this.form = formNode || document.querySelector(formSelector);\r\n      this.btn  = submitNode || this.form.querySelector(submitSelector) || document.querySelector(submitSelector);\r\n    } catch (e) {\r\n      console.log(e.message); return;\r\n    }\r\n\r\n    this.initParam(param);\r\n\r\n    // Form\r\n    this.inputNodes = this.form.querySelectorAll('input[required]');\r\n    this.inputNodes.forEach(n => {\r\n      this.countNodes++;\r\n      if (n.type === 'checkbox') n.addEventListener('click', e => this.validate(e));\r\n      else {\r\n        n.addEventListener('keyup', e => this.keyEnter(e));\r\n\r\n        initMask && n.type === 'tel' && f.maskInit && f.maskInit(n, phoneMask);\r\n      }\r\n      n.addEventListener('blur', e => this.validate(e)); // может и не нужна\r\n      this.validate(n);\r\n    });\r\n\r\n    // Files\r\n    this.fileInput = this.form.querySelector('input[type=\"file\"]');\r\n    if (this.fileInput) {\r\n      fileFieldSelector && (this.fileField = this.form.querySelector(fileFieldSelector)); // Возможно понадобиться много полей\r\n      this.files = {};\r\n    }\r\n\r\n    // Send Btn\r\n    this.btn.onclick = e => this.confirm(e, sendFunc);\r\n    if (this.countNodes === 0 || this.debug) this.btnActivate();\r\n    else if (this.valid.size < this.countNodes) this.btnDisabled();\r\n\r\n    this.onEventForm();\r\n  }\r\n\r\n  initParam(param) {\r\n    let {\r\n          cssClass = {\r\n            error: 'cl-input-error',\r\n            valid: 'cl-input-valid',\r\n          },\r\n          debug = c.DEBUG || false,\r\n        } = param;\r\n    this.cssClass = cssClass;\r\n    this.debug = debug;\r\n    this.countNodes = 0;\r\n  }\r\n\r\n  // Активировать/Деактивировать кнопки\r\n  btnActivate() {\r\n    if (this.valid.size >= this.countNodes) delete this.btn.dataset.disabled;\r\n    else this.btn.dataset.disabled = '1';\r\n  }\r\n\r\n  btnDisabled() {\r\n    this.valid.clear();\r\n    this.btnActivate();\r\n  }\r\n\r\n  checkFileInput() {\r\n    let error = false;\r\n\r\n    for (const file of Object.values(this.fileInput.files)) {\r\n      let id = Math.random() * 10000 | 0;\r\n\r\n      file.fileError = file.size > 1024*1024;\r\n      if (file.fileError && !error) error = true;\r\n\r\n      this.files[id] && (id += '1');\r\n      this.files[id] = file;\r\n    }\r\n    this.clearInput(this.fileInput.files);\r\n    this.showFiles();\r\n\r\n    if (error) {\r\n      this.setErrorValidate(this.fileInput);\r\n      this.btn.setAttribute('disabled', 'disabled');\r\n    } else {\r\n      this.setValidated(this.fileInput);\r\n      this.btnActivate();\r\n    }\r\n  }\r\n\r\n  keyEnter(e) {\r\n    if (e.key === 'Enter') {\r\n      e.target.dispatchEvent(new Event('blur'));\r\n      e.target.blur();\r\n    } else {\r\n      setTimeout(() => this.validate(e), 10);\r\n    }\r\n  }\r\n\r\n  validate(e, ignoreValue = false) {\r\n    let node = e.target || e, reg;\r\n    if (node.value.length > 0 || ignoreValue) {\r\n      switch (node.name) {\r\n        case 'name':\r\n          if (node.value.length < 2) { this.setErrorValidate(node); }\r\n          else this.setValidated(node);\r\n          break;\r\n\r\n        case 'phone': case 'tel':\r\n          reg = /[^\\d|\\(|\\)|\\s|\\-|_|\\+]/;\r\n          if (node.value.length < 18 || reg.test(String(node.value).toLowerCase())) {\r\n            this.setErrorValidate(node);\r\n          } else this.setValidated(node);\r\n          break;\r\n\r\n        case 'email':\r\n          reg = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n          if (!reg.test(String(node.value).toLowerCase())) {\r\n            this.setErrorValidate(node);\r\n          } else this.setValidated(node);\r\n          break;\r\n\r\n        default: {\r\n          this.setValidated(node);\r\n        }\r\n      }\r\n    } else this.removeValidateClasses(node);\r\n    !ignoreValue && this.btnActivate();\r\n  }\r\n\r\n  // Показать/Скрыть (ошибки) валидации\r\n  setErrorValidate(node) {\r\n    this.removeValidateClasses(node);\r\n    node.classList.add(this.cssClass.error);\r\n  }\r\n\r\n  setValidated(node) {\r\n    this.removeValidateClasses(node);\r\n    node.classList.add(this.cssClass.valid);\r\n    this.valid.add(node.id);\r\n  }\r\n\r\n  showFiles() {\r\n    let html = '';\r\n\r\n    Object.entries(this.files).forEach(([i, file]) => {\r\n      html += this.getFileTemplate(file, i);\r\n    });\r\n\r\n    if (this.fileField) this.fileField.innerHTML = html;\r\n    else this.fileInput.insertAdjacentHTML('afterend', '<div>' + html + '</div>');\r\n  }\r\n\r\n  removeValidateClasses(node) {\r\n    node.classList.remove(this.cssClass.error, this.cssClass.valid);\r\n    this.valid.delete(node.id);\r\n  }\r\n\r\n  confirm(e, sendFunc) {\r\n    if (e.target.dataset.disabled) {\r\n      this.inputNodes.forEach(target => this.validate({target}, true));\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData(this.form),\r\n          finished = () => {\r\n\r\n            this.form.querySelectorAll('input')\r\n                .forEach(n => {\r\n                  n.value = '';\r\n                  this.removeValidateClasses(n);\r\n                });\r\n            this.btnDisabled();\r\n\r\n            //  добавить удаление события проверки файла\r\n          }\r\n\r\n    this.fileInput && formData.delete(this.fileInput.name);\r\n    this.files && Object.entries(this.files).forEach(([id, file]) => {\r\n      formData.append(id, file, file.name);\r\n    });\r\n\r\n    sendFunc(formData, finished, e);\r\n  }\r\n\r\n  clickCommon(e) {\r\n    let target = e.target.dataset.action ? e.target : e.target.closest('[data-action]'),\r\n        action = target && target.dataset.action;\r\n\r\n    if (!action) return false;\r\n\r\n    let select = {\r\n      'removeFile': () => this.removeFile(target),\r\n    }\r\n\r\n    select[action] && select[action]();\r\n  }\r\n\r\n  removeFile(target) {\r\n    delete this.files[target.dataset.id];\r\n    this.checkFileInput();\r\n  }\r\n\r\n  onEventForm() {\r\n    this.form.addEventListener('click', (e) => this.clickCommon(e));\r\n    this.fileInput && this.fileInput.addEventListener('change', this.checkFileInput.bind(this));\r\n  }\r\n\r\n  clearInput(node) {\r\n    let input = document.createElement('input');\r\n    input.type = 'file';\r\n    node.files = input.files;\r\n  }\r\n\r\n  getFileTemplate(file, i) {\r\n    return `<div class=\"attach__item ${file.fileError ? this.cssClass.error : ''}\">\r\n        <span class=\"bold\">${file.name}</span>\r\n        <span class=\"table-basket__cross\"\r\n              data-id=\"${i}\"\r\n              data-action=\"removeFile\"></span></div>`;\r\n  }\r\n}\r\n","// МОДУЛИ\r\n//----------------------------------------------------------------------------------------------------------------------\r\n\r\nimport {c} from \"./const.js\";\r\nimport {f} from \"./func.js\";\r\nimport {q} from \"./query.js\";\r\n\r\n// Загрузчик / preLoader\r\nexport class LoaderIcon {\r\n  constructor(field, showNow = true, targetBlock = true, param = {}) {\r\n    this.node = typeof field === 'string' ? f.qS(field) : field;\r\n    if (!(this.node instanceof HTMLElement)) return;\r\n    //this.block         = targetBlock;\r\n    this.customWrap    = param.wrap || false;\r\n    this.customLoader  = param.loader || false;\r\n    this.customLoaderS = param.loaderS || false;\r\n    this.big           = !param.small || true;\r\n    showNow && this.start();\r\n  }\r\n\r\n  setParam() {\r\n    let coords = this.node.getBoundingClientRect();\r\n\r\n    this.big = coords.height > 50;\r\n    this.loaderNode = this.getTemplateNode();\r\n\r\n    this.loaderNode.style.top    = coords.y + pageYOffset + 'px';\r\n    this.loaderNode.style.left   = coords.x + pageXOffset + 'px';\r\n    this.loaderNode.style.height = coords.height + 'px';\r\n    this.loaderNode.style.width  = coords.width + 'px';\r\n  }\r\n\r\n  start() {\r\n    if (this.status) return;\r\n    this.status = true;\r\n\r\n    this.setParam();\r\n    this.big && (this.node.style.filter = 'blur(5px)');\r\n    document.body.style.position = 'relative';\r\n    document.body.append(this.loaderNode);\r\n  }\r\n\r\n  stop() {\r\n    if (!this.status) return;\r\n    this.status = false;\r\n\r\n    this.big && (this.node.style.filter = '');\r\n    document.body.style.position = '';\r\n    this.loaderNode.remove();\r\n  }\r\n\r\n  getTemplateNode() {\r\n    let n = document.createElement('div');\r\n    n.innerHTML = this.templateWrap();\r\n    return n.children[0];\r\n  }\r\n\r\n  templateWrap() {\r\n    let node = this.big ? this.template() : this.templateSmall();\r\n    return this.customWrap || `<div style=\"display: flex;align-items: center;justify-content: center;position:fixed;\">${node}</div>`;\r\n  }\r\n\r\n  template() {\r\n    let template = `\r\n    <style>\r\n    .letter-holder {\r\n      padding: 16px;\r\n    }\r\n    .letter {\r\n      float: left;\r\n      font-size: 14px;\r\n      color: #777;\r\n    }\r\n    .load-6 .letter {\r\n      animation-name: loadingF;\r\n      animation-duration: 1.6s;\r\n      animation-iteration-count: infinite;\r\n    }\r\n    .l-1 {\r\n      animation-delay: 0.48s;\r\n    }\r\n    .l-2 {\r\n      animation-delay: 0.6s;\r\n    }\r\n    .l-3 {\r\n      animation-delay: 0.72s;\r\n    }\r\n    .l-4 {\r\n      animation-delay: 0.84s;\r\n    }\r\n    .l-5 {\r\n      animation-delay: 0.96s;\r\n    }\r\n    .l-6 {\r\n      animation-delay: 1.08s;\r\n    }\r\n    .l-7 {\r\n      animation-delay: 1.2s;\r\n    }\r\n    .l-8 {\r\n      animation-delay: 1.32s;\r\n    }\r\n    .l-9 {\r\n      animation-delay: 1.44s;\r\n    }\r\n    .l-10 {\r\n      animation-delay: 1.56s;\r\n    }\r\n    @keyframes loadingF {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    </style>\r\n    <div class=\"load-6\">\r\n      <div class=\"letter-holder\">\r\n        <div class=\"l-1 letter\">L</div>\r\n        <div class=\"l-2 letter\">o</div>\r\n        <div class=\"l-3 letter\">a</div>\r\n        <div class=\"l-4 letter\">d</div>\r\n        <div class=\"l-5 letter\">i</div>\r\n        <div class=\"l-6 letter\">n</div>\r\n        <div class=\"l-7 letter\">g</div>\r\n        <div class=\"l-8 letter\">.</div>\r\n        <div class=\"l-9 letter\">.</div>\r\n        <div class=\"l-10 letter\">.</div>\r\n      </div>\r\n    </div>\r\n    `;\r\n    return this.customLoader || template;\r\n  }\r\n\r\n  templateSmall () {\r\n    let defSmallLoader = `\r\n    <style>\r\n      .load-3 .line {\r\n        display: inline-block;\r\n        width: 15px;\r\n        height: 15px;\r\n        border-radius: 15px;\r\n        background-color: #4b9cdb;\r\n      }\r\n      .load-3 {\r\n        height: 30px;\r\n        margin-top: -5px;\r\n      }\r\n      .load-3 .line:nth-last-child(1) {\r\n        animation: loadingC 0.6s 0.1s linear infinite;\r\n      }\r\n      .load-3 .line:nth-last-child(2) {\r\n        animation: loadingC 0.6s 0.2s linear infinite;\r\n      }\r\n      .load-3 .line:nth-last-child(3) {\r\n        animation: loadingC 0.6s 0.3s linear infinite;\r\n      }\r\n      @keyframes loadingC {\r\n        0 {\r\n          transform: translate(0, 0);\r\n        }\r\n        50% {\r\n          transform: translate(0, 15px);\r\n        }\r\n        100% {\r\n          transform: translate(0, 0);\r\n        }\r\n      }\r\n    </style>\r\n    <div class=\"load-3\">\r\n      <div class=\"line\"></div>\r\n      <div class=\"line\"></div>\r\n      <div class=\"line\"></div>\r\n    </div>\r\n    `;\r\n\r\n    return this.customLoaderS || defSmallLoader;\r\n  }\r\n}\r\n\r\n// Всплывающее сообщение\r\nexport class MessageToast {\r\n  constructor() {\r\n    this.messageBlock = document.createElement(\"div\");\r\n    this.messageBlock.classList.value = 'position-fixed top-0 start-50 translate-middle-x align-items-center p-3 w-50 fade';\r\n    this.messageBlock.setAttribute('type', 'button');\r\n    this.messageBlock.style.zIndex = '1080';\r\n    document.body.append(this.messageBlock);\r\n  }\r\n\r\n  checkMsq(msg, type) {\r\n    if (!type) {\r\n      this.setMessage(type);\r\n      this.setColor('error');\r\n    } else {\r\n      this.setMessage(msg);\r\n      this.setColor('success');\r\n    }\r\n  }\r\n\r\n  setMessage(msg) {\r\n    this.messageBlock.innerHTML = `<div class=\"row\">\r\n      <div class=\"col-11 text-center\">${msg || 'Текст сообщения пустой'}</div>\r\n      <button type=\"button\" class=\"col-1 btn-close btn-close-white m-auto\"></button>\r\n    </div>`;\r\n  }\r\n\r\n  setColor(color) {\r\n    this.messageBlock.classList.remove('bg-success', 'bg-warning', 'bg-danger');\r\n    switch (color) {\r\n      case 'success':\r\n      default:\r\n        this.messageBlock.classList.add('bg-success');\r\n        break;\r\n      case 'warning':\r\n        this.messageBlock.classList.add('bg-warning');\r\n        break;\r\n      case 'error':\r\n        this.messageBlock.classList.add('bg-danger');\r\n        break;\r\n    }\r\n    setTimeout(() => this.messageBlock.classList.add('show', 'pi-white'), 50);\r\n  }\r\n\r\n  show(msg = 'message body', type = 'success', autoClose = true) {\r\n    const close = (delay = 3000) => {\r\n      setTimeout(() => {\r\n        this.messageBlock.classList.remove('show');\r\n        setTimeout( () => this.messageBlock.remove(), 300);\r\n      }, delay);\r\n    }\r\n\r\n    if (typeof type !== 'string') this.checkMsq(msg, type); else {\r\n      this.setMessage(msg);\r\n      this.setColor(type);\r\n    }\r\n\r\n    if (autoClose) close();\r\n    else this.messageBlock.addEventListener('click', close.bind(this, 0), {once: true});\r\n\r\n    return this.messageBlock;\r\n  }\r\n}\r\n\r\n// Печать\r\nexport const Print = () => {\r\n  let p   = Object.create(null);\r\n  p.frame = document.createElement(\"iframe\");\r\n  p.data  = 'no content'; // html\r\n\r\n  p.frame.onload = function () {\r\n    history.pushState({print: 'ok'}, '', '/');\r\n    this.sandbox  = 'allow-modals';\r\n    this.contentDocument.body.append(p.data);\r\n    this.contentWindow.print();\r\n  }\r\n\r\n  p.loadImage = link => new Promise(resolve => {\r\n    fetch(link).then(data => data.blob()).then(data => {\r\n      let reader = new FileReader();\r\n\r\n      reader.onloadend = () => {\r\n        let img = document.createElement('img');\r\n        img.style.width = '100%';\r\n        img.src = reader.result;\r\n        resolve(img);\r\n      }\r\n\r\n      reader.readAsDataURL(data);\r\n    });\r\n  });\r\n\r\n  p.prepareContent = async function (container) {\r\n    let nodes = container.querySelectorAll('img'),\r\n        imagesPromise = [];\r\n\r\n    nodes.forEach(n => {\r\n      !n.src.includes('base64') && imagesPromise.push(this.loadImage(n.src));\r\n    })\r\n\r\n    imagesPromise.length\r\n    && await Promise.all([...imagesPromise])\r\n                    .then(value => nodes.forEach((n, i) => n.src = value[i].src));\r\n\r\n    return container;\r\n  }\r\n\r\n  p.setContent = async function (content, classList = []) {\r\n    let container = document.createElement('div'), cloneN, delay = 0,\r\n        haveImg = content.includes('<img');\r\n    classList.map(i => container.classList.add(i));\r\n    container.innerHTML = content;\r\n    if(haveImg) {\r\n      container = await this.prepareContent(container);\r\n    }\r\n    this.data = container;\r\n  }\r\n\r\n  p.print = function (content, printStyleTpl = 'printTpl.css', classList = []) {\r\n    q.Get({\r\n      data: 'mode=docs&docsAction=getPrintStyle&fileTpl=' + printStyleTpl\r\n    }).then(async data => {\r\n      const scrollY = window.pageYOffset;\r\n\r\n      typeof data.style === 'string' && (content = `<style>${data.style}</style>` + content);\r\n      await this.setContent(content, classList);\r\n\r\n      document.body.append(this.frame);\r\n      this.frame.remove();\r\n      window.scrollTo(0, scrollY);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Печатать используя фукнцию\r\n   * @param printFunc\r\n   * @param data\r\n   * @param type\r\n   * @return {Promise<void>}\r\n   */\r\n  p.orderPrint = async function (printFunc, data, type) {\r\n    let report = JSON.parse(data.order['reportValue']);\r\n    this.print(await printFunc(type, report));\r\n  }\r\n\r\n  return p;\r\n}\r\n\r\n// Поиск\r\nexport const Searching = () => {\r\n  const obj = Object.create(null);\r\n\r\n  obj.init = function (param) {\r\n    let {popup = true, node, searchData,\r\n          finishFunc = () => {},\r\n          showResult = () => {}} = param,\r\n        func = (e) => this.searchFocus(e);\r\n\r\n    this.usePopup = popup; // Показывать результаты в сплывающем окне\r\n    this.searchData = searchData;\r\n    this.resultFunc = (index) => finishFunc(index);\r\n    this.returnFunc = (resultIds) => showResult(this.resultTmp, resultIds);\r\n\r\n    node.removeEventListener('focus', func);\r\n    node.addEventListener('focus', func);\r\n    node.dispatchEvent(new Event('focus'));\r\n  }\r\n\r\n  obj.setSearchData = function (data) {\r\n    this.searchData = data;\r\n    return this;\r\n  }\r\n\r\n  // Переделать когда нить. в вордпрессе очень крутой поисковик\r\n  obj.search = function (need) {\r\n    let pattern     = /(-|_|\\(|\\)|@)/gm,\r\n        cyrillic    = 'УКЕНХВАРОСМТукенхваросмт',\r\n        latin       = 'YKEHXBAPOCMTykehxbapocmt',\r\n        //cyrillicKey = 'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮйцукенгшщзхъфывапролджэячсмитьбю',\r\n        //latinKey    = 'QWERTYUIOP{}ASDFGHJKL:\\\"ZXCVBNM<>qwertyuiop[]asdfghjkl;\\'zxcvbnm,.',\r\n        replacerLC    = (match) => latin.charAt(cyrillic.indexOf(match)),\r\n        replacerCL    = (match) => cyrillic.charAt(latin.indexOf(match)),\r\n        //replacerKeyLC = (match) => latinKey.charAt(cyrillicKey.indexOf(match)),\r\n        //replacerKeyCL = (match) => cyrillicKey.charAt(latinKey.indexOf(match)),\r\n        lettersL = new RegExp(`(${latin.split('').join('|')})`, 'gi'),\r\n        lettersC = new RegExp(`(${cyrillic.split('').join('|')})`, 'gi');\r\n    //funcKeyL = new RegExp(`(${latinKey.split('').join('|')})`, 'gi'),\r\n    //funcKeyC = new RegExp(`(${cyrillicKey.split('').join('|')})`, 'gi');\r\n\r\n    need = need.replace(pattern, '');\r\n    if (need.includes(' ')) need += '|' + need.split(' ').reverse().join(' ');\r\n\r\n    let regArr = [], i, test;\r\n\r\n    (i = need.replace(lettersL, replacerCL).replace(/ /gm, '.+')) && regArr.push(i);\r\n    (i = need.replace(lettersC, replacerLC).replace(/ /gm, '.+')) && regArr.push(i);\r\n    //(i = need.replace(funcKeyL, replacerKeyCL).replace(/ /gm, '.+')) && regArr.push(i);\r\n    //(i = need.replace(funcKeyC, replacerKeyLC).replace(/ /gm, '.+')) && regArr.push(i);\r\n    //i = `${regArr.join('|')}`;\r\n    test = new RegExp(`${regArr.join('|')}`, 'i');\r\n\r\n    return Object.entries(this.searchData)\r\n                 .map(i => test.test(i[1].replace(pattern, '')) && i[0]).filter(i => i);\r\n  }\r\n\r\n  obj.clear = function (inputNode) {\r\n    inputNode.removeEventListener('keyup', this.bindInputNodeEvent);\r\n    setTimeout(() => {\r\n      this.usePopup && this.resultTmp.remove();\r\n    }, 0);\r\n  }\r\n\r\n  // Events\r\n  const inputNodeEvent = function (e) {\r\n    let value = e.target.value;\r\n    if(value.length > 1) {\r\n      f.show(this.resultTmp);\r\n      this.returnFunc(this.search(value));\r\n    } else {\r\n      f.hide(this.resultTmp);\r\n      this.returnFunc(Object.keys(this.searchData));\r\n    }\r\n    e.key === 'Enter' && e.target.dispatchEvent(new Event('blur')) && e.target.blur();\r\n  }\r\n\r\n  obj.searchFocus = function (e) {\r\n    let target = e.target,\r\n        wrap = target.parentNode;\r\n\r\n    if(this.usePopup && !this.resultTmp) {\r\n      this.resultTmp = f.gTNode('#searchResult');\r\n      this.resultTmp.addEventListener('click', (e) => this.clickResult(e, target));\r\n    }\r\n\r\n    this.bindInputNodeEvent = inputNodeEvent.bind(this);\r\n    target.addEventListener('keyup', this.bindInputNodeEvent);\r\n    target.addEventListener('blur', () => setTimeout(() => this.clear(target), 100), {once: true});\r\n\r\n    if(this.usePopup) {\r\n      wrap.style.position = 'relative';\r\n      wrap.append(this.resultTmp);\r\n    }\r\n\r\n    target.dispatchEvent(new Event('keyup'));\r\n  }\r\n\r\n  obj.clickResult = function (e, inputNode) {\r\n    if(this.resultTmp === e.target) return;\r\n    let index = +e.target.dataset.id;\r\n\r\n    this.clear(inputNode);\r\n    //inputNode.value = this.data[index].name;\r\n    this.resultFunc(index);\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n// Пагинация\r\nexport class Pagination {\r\n  constructor(fieldSelector = 'paginatorWrap', param) {\r\n    let {\r\n      dbAction,       // Принудительное Событие запроса\r\n      sortParam = {}, // ссылка на объект отправляемый с функцией запроса\r\n      query,          // функция запроса со страницы\r\n        } = param,\r\n        field = f.qS(fieldSelector);\r\n\r\n    if (!(field && param.query)) return;\r\n\r\n    this.node           = field;\r\n    this.node.innerHTML = this.template();\r\n    this.node.onclick   = this.onclick.bind(this);\r\n\r\n    this.prevBtn = {node: this.node.querySelector('[data-action=\"prev\"]')};\r\n    this.nextBtn = {node: this.node.querySelector('[data-action=\"next\"]')};\r\n    this.onePageBtnWrap = this.node.querySelector('[data-btnwrap]');\r\n\r\n    this.query       = query;\r\n    this.dbAction    = dbAction;\r\n    this.sortParam   = sortParam;\r\n    this.activeClass = c.CLASS_NAME.ACTIVE;\r\n  }\r\n\r\n  setQueryAction(action) {\r\n    this.dbAction = action;\r\n  }\r\n  setCountPageBtn(count) {\r\n    let pageCount = Math.ceil(+count / this.sortParam.countPerPage );\r\n\r\n    if(+this.sortParam.pageCount !== +pageCount) this.sortParam.pageCount = +pageCount;\r\n    else return;\r\n\r\n    if (pageCount === 1) {\r\n      f.hide(this.prevBtn.node, this.nextBtn.node);\r\n      this.prevBtn.hidden = true;\r\n      this.nextBtn.hidden = true;\r\n      f.eraseNode(this.onePageBtnWrap);\r\n      return;\r\n    }\r\n\r\n    this.fillPagination(pageCount);\r\n  }\r\n\r\n  checkBtn() {\r\n    let currPage = +this.sortParam.currPage;\r\n    if (currPage === 0 && !this.prevBtn.hidden) {\r\n      this.prevBtn.hidden = true;\r\n      f.hide(this.prevBtn.node);\r\n    } else if (currPage > 0 && this.prevBtn.hidden) {\r\n      this.prevBtn.hidden = false;\r\n      f.show(this.prevBtn.node);\r\n    }\r\n\r\n    let pageCount = this.sortParam.pageCount - 1;\r\n    if (currPage === pageCount && !this.nextBtn.hidden) {\r\n      this.nextBtn.hidden = true;\r\n      f.hide(this.nextBtn.node);\r\n    } else if (currPage < pageCount && this.nextBtn.hidden) {\r\n      this.nextBtn.hidden = false;\r\n      f.show(this.nextBtn.node);\r\n    }\r\n\r\n    let n = this.onePageBtnWrap.querySelector('.' + this.activeClass);\r\n    n && n.classList.remove(this.activeClass);\r\n    n = this.onePageBtnWrap.querySelector(`[data-page=\"${currPage}\"]`);\r\n    n && n.parentNode.classList.add(this.activeClass);\r\n  }\r\n\r\n  fillPagination(count) {\r\n    let html = '', tpl,\r\n        input = this.templateBtn();\r\n\r\n    for(let i = 0; i < count; i++) {\r\n      tpl = input.replace('${page}', i.toString());\r\n      tpl = tpl.replace('${pageValue}', (i + 1).toString());\r\n      html += tpl;\r\n    }\r\n\r\n    this.onePageBtnWrap.innerHTML = html;\r\n    this.checkBtn();\r\n  }\r\n\r\n  onclick(e) {\r\n    let btn = e && e.target,\r\n        key = btn && btn.dataset.action;\r\n    if (!key) return;\r\n\r\n    switch (key) {\r\n      case 'prev':\r\n        this.sortParam.currPage--;\r\n        break;\r\n      case 'next':\r\n        this.sortParam.currPage++;\r\n        break;\r\n      case 'page': this.sortParam.currPage = btn.dataset.page; break;\r\n      case 'count':\r\n        if (this.sortParam.countPerPage === +e.target.value) return;\r\n        this.sortParam.countPerPage = +e.target.value;\r\n        this.sortParam.currPage = 0;\r\n        break;\r\n    }\r\n\r\n    //this.l = new LoaderIcon(this.node);\r\n    this.checkBtn();\r\n    this.query(this.dbAction);\r\n  }\r\n\r\n  template() {\r\n    return `<div class=\"pagination justify-content-center\">\r\n      <div class=\"page-item me-2\">\r\n        <button type=\"button\" class=\"page-link\" data-action=\"prev\">&laquo;</button>\r\n      </div>\r\n      <div class=\"page-item pagination\" data-btnwrap></div>\r\n      <div class=\"page-item ms-2\">\r\n        <button type=\"button\" class=\"page-link\" data-action=\"next\">&raquo;</button>\r\n      </div>\r\n\r\n      <div class=\"page-item ms-5\">\r\n        <select class=\"form-select d-inline-block\" data-action=\"count\">\r\n        <option value=\"5\">5 запись</option>\r\n        <option value=\"10\">10 записей</option>\r\n        <option value=\"20\" selected>20 записей</option>\r\n      </select></div>\r\n    </div>`;\r\n  }\r\n\r\n  templateBtn() {\r\n    return `<div class=\"page-item\"><input type=\"button\"\r\n      value=\"\\${pageValue}\" class=\"page-link\"\r\n      data-action=\"page\" data-page=\"\\${page}\"></div>`;\r\n  }\r\n}\r\n\r\n// Сортировка столбцов\r\nexport class SortColumns {\r\n  constructor(param) {\r\n    const {\r\n            thead,     // Тег заголовка с кнопками сортировки\r\n            query,     // Функция запроса\r\n            dbAction,  // Событие ДБ\r\n            sortParam, // Объект Параметров\r\n          } = param;\r\n\r\n    if (!thead || !query || !sortParam) return;\r\n\r\n    let activeClass = c.CLASS_NAME.SORT_BTN_CLASS;\r\n    this.thead = thead;\r\n    this.query = query;\r\n    this.dbAction = dbAction || '';\r\n    this.sortParam = sortParam;\r\n    this.arrow = {\r\n      notActive: '↑↓',\r\n      arrowDown: '↓',\r\n      arrowUp: '↑',\r\n    }\r\n\r\n    // Sort Btn\r\n    this.thead.querySelectorAll('input').forEach(n => {\r\n      n.addEventListener('click', e => this.sortRows.call(this, e));\r\n      n.value += ' ' + this.arrow.notActive;\r\n\r\n      if (n.dataset.column === this.sortParam.sortColumn) {\r\n        n.classList.add(activeClass);\r\n        n.value = n.value.replace(this.arrow.notActive, this.arrow.arrowDown);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  // сортировка\r\n  sortRows(e) { /*↑↓*/\r\n    let input = e.target,\r\n        colSort = input.dataset.column,\r\n        activeClass = c.CLASS_NAME.SORT_BTN_CLASS,\r\n        {notActive, arrowDown, arrowUp} = this.arrow,\r\n        arrowReg = new RegExp(`${notActive}|${arrowDown}|${arrowUp}`);\r\n\r\n    if(this.sortParam.sortColumn === colSort) {\r\n      this.sortParam.sortDirect = !this.sortParam.sortDirect;\r\n    } else {\r\n      this.sortParam.sortColumn = colSort;\r\n      this.sortParam.sortDirect = false;\r\n    }\r\n\r\n    let node = this.thead.querySelector(`input.${activeClass}`);\r\n    if (node !== input) {\r\n      node && node.classList.remove(activeClass);\r\n      node && (node.value = node.value.replace(arrowReg, notActive));\r\n      input.classList.add(activeClass);\r\n    }\r\n\r\n    if (this.sortParam.sortDirect) input.value = input.value.replace(arrowReg, arrowUp);\r\n    else input.value = input.value.replace(arrowReg, arrowDown);\r\n\r\n    this.query(this.dbAction);\r\n  }\r\n}\r\n\r\n// Сохранение заказов посетителей\r\nexport class SaveVisitorsOrder {\r\n  constructor(createCpNumber) {\r\n    this.nodes = [];\r\n    this.createCpNumber = createCpNumber || this.createCpNumberDefault;\r\n  }\r\n\r\n  /**\r\n   * Add nodes to\r\n   * @param collection {nodes[]}\r\n   * @param report {!{cpNumber, inputValue, importantValue, total}}\r\n   * @param event {string}\r\n   *\r\n   * @return result {object} - object contains result work save function;\r\n   */\r\n  setSaveVisitors(collection, report, event = 'click') {\r\n    const result = Object.create(null);\r\n    collection = this.checkNewNodes(collection);\r\n    collection.forEach(n => {\r\n      n.addEventListener(event, async () => {\r\n        await new Promise((res, err) => {\r\n          let i = setInterval(() => this.cpNumber && res(this.cpNumber), 0);\r\n          setTimeout(() => clearInterval(i) && err(''), 1000);\r\n        });\r\n        result.cpNumber = this.cpNumber;\r\n        this.emitAddOrder(report);\r\n      });\r\n    })\r\n    return result;\r\n  }\r\n\r\n  createCpNumberDefault() {\r\n    return new Date().getTime().toString().slice(7);\r\n  }\r\n\r\n  checkNewNodes(c) {\r\n    if (c instanceof NodeList) c = Object.values(c);\r\n    else if (typeof c !== 'object' || !c.length) c = [c];\r\n    return c.filter(n => !this.nodes.includes(n));\r\n  }\r\n\r\n  addOrder(report) {\r\n    console.log('saved');\r\n    typeof report === 'function' && (report = report());\r\n\r\n    // Обязательно проверять есть ли вообще что сохранять\r\n    if (!report || !Object.values(report).length) return;\r\n\r\n    const data = new FormData();\r\n\r\n    data.set('mode', 'DB');\r\n    data.set('dbAction', 'saveVisitorOrder');\r\n    data.set('cpNumber', this.cpNumber);\r\n    data.set('inputValue', JSON.stringify(report['inputValue'] || false));\r\n    data.set('importantValue', JSON.stringify(report['importantValue'] || false));\r\n    data.set('total', report.total);\r\n\r\n    q.Post({data});\r\n  }\r\n\r\n  async emitAddOrder(report) {\r\n    !this.cpNumber && await new Promise((res, err) => {\r\n      let i = setInterval(() => this.cpNumber && res(this.cpNumber), 0);\r\n      setTimeout(() => clearInterval(i) && err(''), 1000);\r\n    });\r\n    setTimeout(() => this.addOrder(report), 0);\r\n  }\r\n\r\n  getCpNumber() {\r\n    !this.cpNumber && (this.cpNumber = this.createCpNumber());\r\n    return this.cpNumber;\r\n  }\r\n}\r\n\r\nexport class Observer {\r\n  constructor() {\r\n    this.publisher = Object.create(null);\r\n    this.listeners = Object.create(null);\r\n  }\r\n  /**\r\n   * add fixed argument with each fired function\r\n   * @param {string} name\r\n   * @param {object} object - pass object\r\n   */\r\n  addArgument(name, object) {\r\n    this.publisher[name] = object;\r\n  }\r\n  remove(name) {\r\n    delete this.publisher[name];\r\n    delete this.listeners[name];\r\n  }\r\n  getListPublisher() {\r\n    return {\r\n      publisher: Object.keys(this.publisher),\r\n      listeners: Object.keys(this.listeners),\r\n    };\r\n  }\r\n  subscribe(name, func) {\r\n    if (!func) console.warn('Function must have!');\r\n    !this.listeners[name] && (this.listeners[name] = []);\r\n    this.listeners[name].push(func);\r\n    return this.publisher[name] || false;\r\n  }\r\n  fire(name, ...arg) {\r\n    if (Array.isArray(this.listeners[name])) {\r\n      this.listeners[name].forEach(listener => listener(...arg, this.publisher[name]));\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// Одноразовые функции\r\nexport class OneTimeFunction {\r\n  constructor(funcName, func) {\r\n    this.func = Object.create(null);\r\n\r\n    funcName && this.add(funcName, func);\r\n  }\r\n\r\n  add(name, func) {\r\n    this.func[name] = func;\r\n  }\r\n\r\n  exec(name, ...arg) {\r\n    if (this.func[name]) {\r\n      this.func[name](...arg);\r\n      this.del(name);\r\n    }\r\n  }\r\n\r\n  del(name) {\r\n    this.func[name] && (delete this.func[name]);\r\n  }\r\n}\r\n","'use strict';\r\n\r\n/**\r\n * Global variables and simple functions\r\n */\r\nexport const c = {\r\n  DEBUG        : window['DEBUG'] || false,\r\n  CSV_DEVELOP  : !!window['CSV_DEVELOP'] || false,\r\n  OUTSIDE      : window['CL_OUTSIDE'],\r\n  CURRENT_PAGE : window['CURRENT_PAGE'],\r\n  SITE_PATH    : window['SITE_PATH'] || '/',\r\n  MAIN_PHP_PATH: window['MAIN_PHP_PATH'],\r\n  PUBLIC_PAGE  : window['PUBLIC_PAGE'] || 'calculator',\r\n  PATH_IMG     : window['PATH_IMG'],\r\n  AUTH_STATUS  : !!(window['AUTH_STATUS'] || false),\r\n  TOKEN        : window['TOKEN'],\r\n\r\n  PHONE_MASK: '+7 (___) ___ __ __',\r\n\r\n  // Global IDs\r\n  // ------------------------------------------------------------------------------------------------\r\n  ID: {\r\n    AUTH_BLOCK: 'authBlock',\r\n    POPUP: {\r\n      title: 'popup_title',\r\n    },\r\n    PUBLIC_PAGE: 'publicPageLink'\r\n  },\r\n\r\n  CLASS_NAME: {\r\n    // css класс который добавляется активным элементам\r\n    ACTIVE: 'active',\r\n    // css класс который добавляется кнопкам сортировки\r\n    SORT_BTN_CLASS: 'btn-light',\r\n    // css класс который добавляется скрытым элементам\r\n    HIDDEN_NODE: 'd-none',\r\n    // css класс который добавляется неактивным элементам\r\n    DISABLED_NODE: 'disabled',\r\n    // css класс который добавляется при загрузке\r\n    LOADING: 'loading-st1',\r\n  },\r\n\r\n  // Пробное\r\n  calcWrap: document.querySelector('#wrapCalcNode'),\r\n};\r\n","import {c} from \"./const.js\";\r\nimport {q} from \"./query.js\";\r\n\r\nconst func = {\r\n\r\n  // Simple and often used function\r\n  // ------------------------------------------------------------------------------------------------\r\n\r\n  log: msg => c.DEBUG && console.log('Error:' + msg),\r\n\r\n  /**\r\n   * Get Element by id from document or shadow DOM\r\n   * @param id\r\n   * @return {HTMLElement | {}}\r\n   */\r\n  gI: id => (c.calcWrap || document).getElementById(id) || func.log('not found note by id -' + id),\r\n\r\n  /**\r\n   * @param selector\r\n   * @param node\r\n   * @return {HTMLElement | {}}\r\n   */\r\n  qS: (selector = '', node = c.calcWrap) =>\r\n    (node || document).querySelector(selector) || func.log(selector),\r\n\r\n  /**\r\n   *\r\n   * @param selector {string} - css selector string\r\n   * @param nodeKey {string/null} - param/key\r\n   * @param value - value/function, function (this, Node list, current selector)\r\n   * @return NodeListOf<HTMLElementTagNameMap[*]>|object\r\n   */\r\n  qA: (selector, nodeKey = null, value = null) => {\r\n    let nodeList = (c.calcWrap || document).querySelectorAll(selector);\r\n    if (!nodeList) return {};\r\n    if (nodeKey && value) nodeList.forEach((item) => {\r\n      if(typeof value === 'function') {\r\n        item.addEventListener(nodeKey, (e) => value.call(item, e, nodeList, selector));\r\n        //item[nodeKey] = () => value.call(item, nodeList, selector);\r\n      } else {\r\n        item[nodeKey] = value;\r\n      }\r\n    });\r\n    return nodeList;\r\n  },\r\n\r\n  /**\r\n   * получить html шаблона\r\n   *\r\n   * @param selector {string}\r\n   * @return {string}\r\n   */\r\n  gT: selector => { let node = func.qS(selector); return node ? node.content.children[0].outerHTML : 'Not found template' + id},\r\n\r\n  /**\r\n   * Получить Node шаблона\r\n   * @param selector {string}\r\n   * @returns {Node}\r\n   */\r\n  gTNode: selector => func.qS(selector).content.children[0].cloneNode(true),\r\n\r\n  getData: selector => {\r\n    const node = func.qS(selector),\r\n          json = node && (JSON.parse(node.value));\r\n    if (!node) return false;\r\n    else node.remove();\r\n    return json;\r\n  },\r\n\r\n  /**\r\n   * get Object like associative arrays\r\n   * @param selector\r\n   * @return object\r\n   */\r\n  getDataAsAssoc: selector => {\r\n    const arr      = Object.values(func.getData(selector) || []),\r\n          fItem    = arr[0],\r\n          fKeys    = Object.keys(fItem);\r\n\r\n    let oneValue = false;\r\n\r\n    if (fKeys.length === 2 && (fItem['id'] || fItem['key'])) {\r\n      const res = fKeys.filter(k => !['id', 'key'].includes(k));\r\n      res.length === 1 && (oneValue = res[0]);\r\n    }\r\n\r\n    return arr.reduce((r, i, index) => {\r\n      let idKey = i['id'] || i['key'] || Math.random() * 1000 | 0;\r\n      r[idKey] && (idKey += index.toString());\r\n      r[idKey] = oneValue ? i[oneValue] : i;\r\n      return r;\r\n    }, Object.create(null));\r\n  },\r\n  getDataAsMap: selector => new Map(Object.entries(func.getDataAsAssoc(selector) || {})),\r\n  getDataAsSet: selector => new Set(Object.values(func.getData(selector) || [])),\r\n  getDataAsArray : selector => Object.values(func.getData(selector) || []),\r\n\r\n  // перевод в число\r\n  toNumber: input => +(input.replace(/(\\s|\\D)/g, '')),\r\n\r\n  /**\r\n   * Формат цифр (разделение пробелом)\r\n   */\r\n  setFormat: num => (num.toFixed(0)).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \"),\r\n\r\n  /** Показать элементы, аргументы коллекции NodeList */\r\n  show: (...collection) => { collection.map(nodes => {\r\n    if(!nodes) return;\r\n    if(!nodes.forEach) nodes = [nodes];\r\n    nodes.forEach(n => n.classList.remove(c.CLASS_NAME.HIDDEN_NODE));\r\n  }) },\r\n\r\n  /**\r\n   * Скрыть элементы\r\n   * @param collection\r\n   */\r\n  hide: (...collection) => { collection.map(nodes => {\r\n    if(!nodes) return;\r\n    if(!nodes.forEach) nodes = [nodes];\r\n    nodes.forEach(n => n.classList.add(c.CLASS_NAME.HIDDEN_NODE));\r\n  }) },\r\n\r\n  /**\r\n   * Очистить узел от дочерних элементов (почему-то быстрее чем через innerHTMl)\r\n   * @param node\r\n   * @returns {*}\r\n   */\r\n  eraseNode: node => {\r\n    let n;\r\n    while ((n = node.firstChild)) n.remove();\r\n    return node;\r\n  },\r\n\r\n  /**\r\n   * Replace latin to cyrillic symbol\r\n   * @param value\r\n   * @return {void | string}\r\n   */\r\n  replaceLetter: value => {\r\n    let cyrillic = 'УКЕНХВАРОСМТ',\r\n        latin    = 'YKEHXBAPOCMT',\r\n        replacer = (match) => cyrillic.charAt(latin.indexOf(match)),\r\n        letters  = new RegExp(`(${latin.split('').join('|')})`, 'gi');\r\n    return value.replace(letters, replacer).replace(/(&nbsp| | )/g, '').toLowerCase(); // какой-то пробел\r\n  },\r\n\r\n  /**\r\n   * replace ${key from obj} from template to value from obj\r\n   * @param tmpString html string template\r\n   * @param arrayObjects array of object\r\n   * @return {string}\r\n   */\r\n  replaceTemplate: (tmpString, arrayObjects) => {\r\n    let html = '';\r\n\r\n    if (tmpString) {\r\n      if (!arrayObjects.map) arrayObjects = [arrayObjects];\r\n\r\n      arrayObjects.map(item => {\r\n        let tmp = tmpString.trim();\r\n        Object.entries(item).map(v => {\r\n          if (!v[1]) v[1] = '';\r\n          let reg = new RegExp(`\\\\\\${${v[0]}}`, 'mgi');\r\n          tmp     = tmp.replace(reg, v[1].toString().replace(/\"/g, '\\'')); // replace ${key from obj} from template to value from obj //не помогло\r\n        });\r\n\r\n        html += tmp;\r\n      })\r\n    }\r\n\r\n    return html;\r\n  },\r\n\r\n  /**\r\n   * Input будет давать true, когда активен(checked)\r\n   * для определения цели добавить input-у data-target=\"targetClass\"\r\n   * Цели добавить в data-relation в виде логического выражения\r\n   * Истина будет показывать цель.\r\n   * Например: data-target=\"target\" -> data-relation=\"target\"\r\n   *\r\n   * Селекторы должны иметь класс useToggleOption\r\n   * Опциям селектора добавить data-target=\"targetClass\"\r\n   *\r\n   */\r\n  relatedOption: (node = document) => {\r\n    const reg = new RegExp(/([\\w\\d_-]+)/, 'g'),\r\n          qs = s => node.querySelectorAll(s),\r\n          show = n => n.classList.remove('d-none'),\r\n          hide = n => n.classList.add('d-none');\r\n\r\n    const targetNodes = Object.create(null);\r\n\r\n    const setInputMember = nodeT => {\r\n      let match, relationT = [],\r\n          relation = nodeT.dataset.relation.replaceAll(' ', '');\r\n\r\n      while ((match = reg.exec(relation))) relationT.push(match[0]);\r\n      !nodeT.id && (nodeT.id = 'target' + (Math.random() * 10000 | 0));\r\n\r\n      targetNodes[nodeT.id] = {relation, relationT, nodesT: Object.create(null)};\r\n\r\n      return targetNodes[nodeT.id];\r\n    }\r\n    const setSelectMembers = key => {\r\n      const targetsN = [...qs(`[data-relation*=\"${key}\"]`)];\r\n      targetNodes[key] = [];\r\n\r\n      if (targetsN.length) {\r\n        qs(`[data-relation*=\"${key}\"]`).forEach(targetN => {\r\n          let match,\r\n              relationT = [],\r\n              relation  = targetN.dataset.relation.replaceAll(' ', '');\r\n\r\n          while ((match = reg.exec(relation))) relationT.push(match[0]);\r\n\r\n          targetNodes[key].push({targetN, relation, relationT, nodesT: Object.create(null)});\r\n        });\r\n      } else console.warn('Event relatedOption: target not found' + key);\r\n\r\n      return targetNodes[key];\r\n      }\r\n    const checkedTarget = (node, member) => {\r\n      let {relation, relationT} = member;\r\n\r\n      relationT.forEach(t => {\r\n        !member.nodesT[t] && (member.nodesT[t] = [...f.qA(`input[data-target=\"${t}\"], select [data-target=\"${t}\"]`)]);\r\n\r\n        if (member.nodesT[t].length) {\r\n          let checked = !!member.nodesT[t].find(item => item.checked || item.selected); // Находим в группе хоть 1 включенный (или противоположный выключенный)\r\n          relation = relation.replace(t, checked.toString());\r\n        } else console.warn('Event relatedOption: target not found' + t);\r\n      });\r\n\r\n      try {\r\n        new Function('return ' + relation)() ? show(node) : hide(node);\r\n      } catch (e) {\r\n        console.error('Event relatedOption: relation string is not valid logic expression');\r\n      }\r\n    }\r\n\r\n    // Возможно стоит добавить загрузку если целей слишком много! (определить практическим путем)\r\n    qs('input[data-target]').forEach(eNode => {\r\n      const target = eNode.dataset.target;\r\n      if (!target) { console.warn('Initialisation relatedOption: ' + target + ' is empty '); return; }\r\n\r\n      let nodesT = false, nodesR = [];\r\n\r\n      const changeEvent = (relation = true) => {\r\n        nodesT = nodesT || qs(`[data-relation*=\"${target}\"]`);\r\n\r\n        nodesT.forEach(nodeT => {\r\n          let member = targetNodes[nodeT.id];\r\n          !member && (member = setInputMember(nodeT));\r\n          checkedTarget(nodeT, member);\r\n        });\r\n\r\n        relation && nodesR.forEach(n => n.dispatchEvent(new Event('changeR')));\r\n      };\r\n\r\n      if (eNode.type === 'radio' && eNode.name) {\r\n        qs(`input[name=\"${eNode.name}\"]`).forEach(n => {\r\n          if (eNode !== n && n.dataset.target) {\r\n            nodesR.push(n);\r\n            n.addEventListener('changeR', () => changeEvent(false));\r\n          }\r\n        });\r\n      }\r\n\r\n      eNode.addEventListener('change', () => changeEvent());\r\n      eNode.dispatchEvent(new Event('change'));// очень затратно наверное\r\n    });\r\n    qs('select.useToggleOption').forEach(eNode => {\r\n      eNode.addEventListener('change', () => {\r\n        [...eNode.options].forEach(opt => {\r\n          const target = opt.dataset.target;\r\n          let members;\r\n          if (!target) return;\r\n\r\n          members = targetNodes[target];\r\n          !members && (members = setSelectMembers(target));\r\n\r\n          members.forEach(member => checkedTarget(member.targetN, member));\r\n        });\r\n      });\r\n\r\n      eNode.dispatchEvent(new Event('change'));// очень затратно наверное\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Получить и скачать файл\r\n   * @param fileName\r\n   * @return {HTMLAnchorElement}\r\n   */\r\n  createLink: fileName => {\r\n    //let date = new Date();\r\n    //fileName += '_' + date.getDate() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (date.getYear() - 100) + '_' + date.getHours() + date.getMinutes() + date.getSeconds() + '.pdf';\r\n    let a = document.createElement('a');\r\n    a.setAttribute('download', fileName);\r\n    return a;\r\n  },\r\n\r\n  /**\r\n   * Save file from browser\r\n   * @param data {{'name', 'type' , 'blob'}}\r\n   *\r\n   * @example for PDF:\r\n   * {name: 'file.pdf',\r\n   * type: 'base64',\r\n   * blob: 'data:application/pdf;base64,' + data['pdfBody']}\r\n   */\r\n  saveFile: data => {\r\n    const {name = 'download.file', blob} = data;\r\n    let link = func.createLink(name);\r\n    if (data.type === 'base64') link.href = blob;\r\n    else link.href = URL.createObjectURL(blob);\r\n    link.click();\r\n  },\r\n\r\n  // Маска для телефона\r\n  maskInit: (node, phoneMask) => {\r\n    if (!node) return;\r\n    const minValue = 2;\r\n\r\n    const mask = e => {\r\n      let target = e.target, i = 0,\r\n          matrix = phoneMask || c.PHONE_MASK,\r\n          def = matrix.replace(/\\D/g, \"\"),\r\n          val = target.value.replace(/\\D/g, \"\");\r\n\r\n      if (def.length >= val.length) val = def;\r\n      target.value = matrix.replace(/./g,\r\n        a => /[_\\d]/.test(a) && i < val.length ? val.charAt(i++) : i >= val.length ? \"\" : a );\r\n\r\n      if (e.type === \"blur\" && target.value.length <= minValue) target.value = \"\";\r\n    }\r\n\r\n    ['input', 'focus', 'blur'].map(e => node.addEventListener(e, mask));\r\n  },\r\n\r\n  // Активировать элементы\r\n  enable: (...collection) => {\r\n    collection.map(nodes => {\r\n      if(!nodes.forEach) nodes = [nodes];\r\n      nodes.forEach(n => {\r\n\r\n        n.classList.remove(c.CLASS_NAME.DISABLED_NODE);\r\n        n.removeAttribute('disabled');\r\n\r\n        /*switch (n.tagName) { TODO что это\r\n         case 'BUTTON': case 'INPUT': { }\r\n         case 'A': { }\r\n         }*/\r\n      });\r\n    });\r\n  },\r\n\r\n  // Деактивировать элементы\r\n  disable: (...collection) => {\r\n    collection.map(nodes => {\r\n      if(!nodes.forEach) nodes = [nodes];\r\n      nodes.forEach(n => {\r\n        n.classList.add(c.CLASS_NAME.DISABLED_NODE);\r\n        n.setAttribute('disabled', 'disabled');\r\n      });\r\n    });\r\n  },\r\n\r\n  /** Добавить иконку загрузки */\r\n  setLoading: node => {\r\n    node && node.classList.add(c.CLASS_NAME.LOADING);\r\n  },\r\n  /** Удалить иконку загрузки */\r\n  removeLoading: node => {\r\n    node && node.classList.remove(c.CLASS_NAME.LOADING);\r\n  },\r\n\r\n  /**\r\n   * Функция печати по умолчанию\r\n   * @param report\r\n   * @param number\r\n   * @returns {string}\r\n   */\r\n  printReport: (report, number = 1) => {\r\n    let table = f.gTNode('#printTable'),\r\n        html = '';\r\n\r\n    Object.values(report).map(i => {\r\n      html += `<tr><td>${i[0]}</td><td>${i[1]}</td><td>${i[2]}</td></tr>`;\r\n    });\r\n\r\n    if (number) table.querySelector('#number').innerHTML = number.toString();\r\n    else table.querySelector('#numberWrap').classList.add(f.CLASS_NAME.HIDDEN_NODE);\r\n    table.querySelector('tbody').innerHTML = html;\r\n    return table.outerHTML;\r\n  },\r\n\r\n  /**\r\n   *\r\n   * @param target HTML node (loading field)\r\n   * @param report {object}: send to pdf\r\n   * @param data {FormData}: object of formData to send in query Body\r\n   * @param finishOk function\r\n   * @param err function\r\n   */\r\n  downloadPdf(target, report = {}, data = new FormData(), finishOk = () => {}, err = () => {}) {\r\n    func.setLoading(target);\r\n    target.setAttribute('disabled', 'disabled');\r\n\r\n    let fileName = report.fileName || false;\r\n    //data.set('dbAction', 'DB');\r\n    data.set('mode', 'docs');\r\n    data.set('docType', 'pdf');\r\n    data.set('reportVal', JSON.stringify(report));\r\n\r\n    q.Post({data}).then(data => {\r\n      func.removeLoading(target);\r\n      target.removeAttribute('disabled');\r\n      if (data['pdfBody']) {\r\n        f.saveFile({\r\n          name: fileName || data['name'],\r\n          type: 'base64',\r\n          blob: 'data:application/pdf;base64,' + data['pdfBody']\r\n        });\r\n        finishOk();\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Словарь\r\n   */\r\n  dictionaryInit() {\r\n    const d = Object.create(null),\r\n          node = f.qS('#dictionaryData');\r\n\r\n    if (!node) return;\r\n    d.data = JSON.parse(node.value);\r\n    node.remove();\r\n\r\n    d.getTitle = function (key) { return this.data[key] || key; }\r\n\r\n    /**\r\n     * Template string can be param (%1, %2)\r\n     * @param key - array, first item must be string\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    d.translate = function (...key) {\r\n      if(key.length === 1) return d.getTitle(key[0]);\r\n      else {\r\n        let str = d.getTitle(key[0]);\r\n        for(let i = 1; i< key.length; i++) {\r\n          if(key[i]) str = str.replace(`%${i}`, key[i]);\r\n        }\r\n        return str;\r\n      }\r\n    };\r\n    window._ = d.translate;\r\n  },\r\n\r\n  // Курсы валют (РФ)\r\n  setRate(dataSelector = '#dataRate') {\r\n    let node = f.qS(dataSelector), json;\r\n    node && (json = JSON.parse(node.value)) && node.remove();\r\n    json && (this.rate = json['curs']);\r\n  },\r\n\r\n  // Border warning\r\n  flashNode(item) {\r\n    let def                 = item.style.boxShadow,\r\n        boxShadow           = 'red 0px 0px 4px 1px';\r\n    def === boxShadow && (def = '');\r\n    item.style.boxShadow    = boxShadow;\r\n    item.style.borderRadius = '4px';\r\n    item.style.transition   = 'all 0.2s ease';\r\n    setTimeout(() => {\r\n      item.style.boxShadow = def || 'none';\r\n    }, 1000);\r\n  },\r\n\r\n  /**\r\n   * Try parse to float number from any string\r\n   * @val v string\r\n   */\r\n  parseNumber(v) {\r\n    typeof v === 'string' && (v = v.replace(',', '.'))\r\n    && !isFinite(v) && /\\d/.test(v) && (v = parseFloat(v.match(/\\d+|\\.|\\d+/g).join('')));\r\n    !isFinite(v) && (v = 0);\r\n    return +v;\r\n  },\r\n\r\n  /**\r\n   * Get value\r\n   * @param selector {string|HTMLSelectElement}\r\n   * @return {boolean|array}\r\n   */\r\n  getMultiSelect(selector) {\r\n    const node = typeof selector === 'string' ? f.qS(selector) : selector;\r\n    if (node) {\r\n      return [...node.selectedOptions].reduce((r, option) => { r.push(option.value); return r}, []);\r\n    }\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * trance literation\r\n   * @param value\r\n   * @returns {string}\r\n   */\r\n  transLit(value) {\r\n    const cyrillic = 'А-а-Б-б-В-в-Г-г-Д-д-Е-е-Ё-ё-Ж-ж-З-з-И-и-Й-й-К-к-Л-л-М-м-Н-н-О-о-П-п-Р-р-С-с-Т-т-У-у-Ф-ф-Х-х-Ц-ц-Ч-ч-Ш-ш-Щ-щ-Ъ-ъ-Ы-ы-Ь-ь-Э-э-Ю-ю-Я-я'.split('-'),\r\n          latin    = 'A-a-B-b-V-v-G-g-D-d-E-e-E-e-ZH-zh-Z-z-I-i-Y-y-K-k-L-l-M-m-N-n-O-o-P-p-R-r-S-s-T-t-U-u-F-f-H-h-TS-ts-CH-ch-SH-sh-SCH-sch- - -Y-y- - -E-e-YU-yu-YA-ya'.split('-'),\r\n          replacer = match => latin[cyrillic.indexOf(match)],\r\n          letters  = new RegExp(`(${cyrillic.join('|')})`, 'g');\r\n\r\n    return value.replaceAll(/\\s/g, '_').replace(letters, replacer);\r\n  },\r\n}\r\n\r\nexport const f = Object.assign(func, q);\r\n","import {c} from \"./const.js\";\r\n\r\n// Query Object -----------------------------------------------------------------------------------------------------------------\r\n\r\nconst checkJSON = data => {\r\n  try {\r\n    const response = JSON.parse(data);\r\n    if (response['error']) throw response['error'];\r\n    return response;\r\n  }\r\n  catch (e) { f.showMsg(e['xdebug_message'] || e.message || data, 'error', false); return {status: false}; }\r\n};\r\n\r\nconst downloadBody = async (data) => {\r\n  const fileName = JSON.parse(data.headers.get('fileName')),\r\n        reader = data.body.getReader();\r\n  let chunks = [],\r\n      countSize = 0;\r\n\r\n  while(true) {\r\n    // done становится true в последнем фрагменте\r\n    // value - Uint8Array из байтов каждого фрагмента\r\n    const {done, value} = await reader.read();\r\n\r\n    if (done) break;\r\n\r\n    chunks.push(value);\r\n    countSize += value.length;\r\n  }\r\n  return Object.assign(new Blob(chunks), {fileName});\r\n}\r\n\r\nconst query = (url, data, type = 'json') => {\r\n  type === 'file' && (type = 'body');\r\n  return fetch(url, {method: 'post', body: data, headers: {'X-CSRF-TOKEN': c.TOKEN}})\r\n    .then(res => type === 'json' ? res.text() : res).then(\r\n      data => {\r\n        if (type === 'json') return checkJSON(data, type);\r\n        else if (type === 'body') return downloadBody(data);\r\n        else return data[type]();\r\n      },\r\n      error => console.log(error),\r\n    );\r\n};\r\n\r\n/**\r\n * @type {{Post: (function({url?: *, data?: *, type?: *}): Promise),\r\n * Get: (function({url: *, data: *, type?: *}): Promise)}}\r\n */\r\nexport const q = {\r\n\r\n  /**\r\n   * @param url\r\n   * @param data\r\n   * @param type\r\n   * @return {*}\r\n   * @constructor\r\n   */\r\n  Get: ({url = c.MAIN_PHP_PATH, data, type = 'json'}) => query(url + '?' + data, '', type),\r\n\r\n  /**\r\n   * Fetch Post function\r\n   * @param url\r\n   * @param data\r\n   * @param type\r\n   * @returns {Promise<Response>}\r\n   */\r\n  Post: ({url = c.MAIN_PHP_PATH, data, type = 'json'}) => query(url, data, type),\r\n\r\n};\r\n","'use strict'\r\n\r\nconst getCustomElements = () => {\r\n  let element;\r\n\r\n  customElements.define('shadow-calc', class extends HTMLElement {\r\n    connectedCallback() {\r\n      element = this.attachShadow({ mode: 'open' });\r\n    }\r\n  });\r\n\r\n  return element;\r\n}\r\n\r\nexport class shadowNode {\r\n\r\n  constructor() {\r\n    this.customElements = getCustomElements();\r\n    this.customElements && this.init();\r\n  }\r\n\r\n  init() {\r\n    let shadowRoot = this.customElements,\r\n        node = f.qS('#wrapCalcNode');\r\n\r\n    shadowRoot.innerHTML = '';\r\n    node.querySelectorAll('link[data-href]').forEach(n => {\r\n      if (n.dataset.global) document.head.append(n);\r\n      n.href = n.dataset.href;\r\n    });\r\n    shadowRoot.append(node);\r\n    node.style.display = 'block';\r\n\r\n    /*const template     = document.createElement('template');\r\n     template.innerHTML = `<slot></slot><slot name=\"styles\"></slot>`;\r\n     this.shadowRoot.append(template.content.cloneNode(true));\r\n     const style = this.shadowRoot.querySelector('slot').assignedNodes();\r\n     this.shadowRoot.append(style[0]);*/\r\n  }\r\n\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\r\n\r\nimport '../css/style.scss';\r\n\r\nimport {c} from \"./components/const.js\";\r\nimport {f} from \"./components/func.js\";\r\n\r\nimport * as module from './components/component.js';\r\nimport {Debugger} from \"./components/Debugger\";\r\nimport {Modal} from './components/Modal.js';\r\nimport {CustomSelect} from './components/CustomSelect.js';\r\nimport {shadowNode} from './components/shadownode.js';\r\nimport {SelectedRow} from \"./components/SelectedRow.js\";\r\nimport {Valid} from \"./components/Valid\";\r\n\r\nconst m = {\r\n  /**\r\n   * Debugger\r\n   */\r\n  Debugger,\r\n\r\n\r\n  initModal : Modal,\r\n  initPrint : module.Print,\r\n  initShadow: (param) => new shadowNode(param),\r\n\r\n  observer: new module.Observer(),\r\n\r\n  searchInit: module.Searching,\r\n\r\n  /**\r\n   *\r\n   */\r\n  InitSaveVisitorsOrder: module.SaveVisitorsOrder,\r\n\r\n  /**\r\n   *\r\n   */\r\n  CustomSelect: CustomSelect,\r\n\r\n  /**\r\n   *\r\n   */\r\n  LoaderIcon: module.LoaderIcon,\r\n\r\n  /**\r\n   * @param name {string}\r\n   * @param func {function}\r\n   */\r\n  OneTimeFunction: module.OneTimeFunction,\r\n\r\n  Pagination: module.Pagination,\r\n\r\n  /**\r\n   * @param param {{thead: HTMLElement,\r\n   * query: function,\r\n   * dbAction: string,\r\n   * sortParam: object}}\r\n   * @param param.thead - element with sort button, button must have data-column\r\n   * @param param.query - exec func with param dbAction\r\n   * @param param.dbAction - action for db, send whit query\r\n   * @param param.sortParam = {\r\n   *   sortDirect: boolean, true = DESC\r\n   *   currPage: integer,\r\n   *   countPerPage: integer,\r\n   *   pageCount: integer,\r\n   * } - param as page, sort and other\r\n   */\r\n  SortColumns: module.SortColumns,\r\n\r\n  /**\r\n   * @param {object} param {{\r\n   *   table: HTMLElement,\r\n   * }}\r\n   *\r\n   * @param param.table - DOM node element consist data-id as elements Rows\r\n   * @default param.table - f.qS('#table')\r\n   */\r\n  SelectedRow: SelectedRow,\r\n\r\n  /**\r\n   * @param {string} msg\r\n   * @param {string} type (success, warning, error)\r\n   * @param {boolean} autoClose\r\n   */\r\n  showMsg: (msg, type = 'success', autoClose = true) => new module.MessageToast().show(msg, type, autoClose),\r\n\r\n  /**\r\n   * Validation component\r\n   * autodetect input field with attribute \"require\" and show error/valid.\r\n   *\r\n   * @param param {{sendFunc: function,\r\n   * formNode: HTMLFormElement,\r\n   * formSelector: string,\r\n   * submitNode: HTMLElement,\r\n   * submitSelector: string,\r\n   * fileFieldSelector: string,\r\n   * initMask: boolean,\r\n   * phoneMask: string,\r\n   * cssMask: object}}\r\n   * @param param.sendFunc - exec func for event click (default = () => {}),\r\n   * @param param.formSelector - form selector (default: #authForm),\r\n   * @param param.submitSelector - btn selector (default: #btnConfirm),\r\n   * @param param.fileFieldSelector - field selector for show attachment files information,\r\n   * @param param.cssClass = {\r\n   *     error: will be added class for node (default: 'cl-input-error'),\r\n   *     valid: will be added class for node (default: 'cl-input-valid'),\r\n   *   },\r\n   * @param param.debug: submit btn be activated (def: false),\r\n   * @param param.initMask: use mask for field whit type \"tel\" (def: true),\r\n   * @param param.phoneMask: mask matrix (def: from global constant),\r\n   *\r\n   * @example mask: new f.Valid({phoneMask: '+1 (\\_\\_) \\_\\_\\_'});\r\n   */\r\n  Valid,\r\n  //initValid : (sendFunc, idForm, idSubmit) => module.valid.init(sendFunc, idForm, idSubmit),\r\n};\r\n\r\nwindow.f = Object.assign(c, m, f);\r\n"],"names":[],"sourceRoot":""}