{"version":3,"file":"js/module/users.js","mappings":";;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,oCAAoC,6CAA6C;AACjF,0BAA0B,8BAA8B;AACxD;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,0CAA0C,uDAAuD;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,oCAAoC;AACpC,+CAA+C,2DAA2D;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E,6EAA6E;AAC7E;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mCAAmC;AACnC;AACA;AACA,yBAAyB;AACzB;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA","sources":["webpack://my-webpack-project/./js/module/users/users.js"],"sourcesContent":["'use strict';\r\n\r\nconst users = {\r\n  form: new FormData(),\r\n\r\n  needReload: false,\r\n  table: f.qS('#usersTable'),\r\n  tbody: '',\r\n  impValue: '',\r\n  confirm: f.qS('#confirmField'),\r\n  confirmMsg: false,\r\n\r\n  tmp: {\r\n    form: f.gTNode('#userForm'),\r\n  },\r\n\r\n  queryParam: {\r\n    dbAction    : 'loadUsers',\r\n    sortColumn  : 'created_at',\r\n    sortDirect  : false, // true = DESC, false\r\n    currPage    : 0,\r\n    countPerPage: 20,\r\n    pageCount   : 0,\r\n  },\r\n\r\n  delayFunc: () => {},\r\n  //statusList: Object.create(null), // Типы доступов\r\n\r\n  usersList: new Map(),\r\n\r\n  init() {\r\n    this.p = new f.Pagination('#paginator', {\r\n      dbAction : 'loadUsers',\r\n      sortParam: this.queryParam,\r\n      query    : this.query.bind(this),\r\n    });\r\n    this.id = new f.SelectedRow({table: this.table});\r\n    new f.SortColumns({\r\n      thead: this.table.querySelector('thead'),\r\n      query: this.query.bind(this),\r\n      dbAction : 'loadUsers',\r\n      sortParam: this.queryParam,\r\n    });\r\n    this.M = f.initModal();\r\n    this.query();\r\n\r\n    this.onEvent();\r\n  },\r\n\r\n  setUsers(data) {\r\n    this.usersList = new Map();\r\n    data.forEach(i => this.usersList.set(i.id, i));\r\n  },\r\n  fillTable(data) {\r\n    this.contValue || (this.contValue = f.gT('#tableContactsValue'));\r\n    data = data.map(item => {\r\n      item.name = _(item.name);\r\n      if (item.hasOwnProperty('activity')) {\r\n        item.activityValue = !!item.activity;\r\n        item.activity = item.activityValue ? '+' : '-';\r\n      }\r\n\r\n      if(true /* TODO настройки вывода даты*/) {\r\n        for (let i in item) {\r\n          if(i.includes('date')) {\r\n            item[i] = item[i].replace(/ |(\\d\\d:\\d\\d:\\d\\d)/g, '');\r\n          }\r\n        }\r\n      }\r\n\r\n      return item;\r\n    })\r\n\r\n    let html  = '';\r\n    this.tbody || (this.tbody = this.table.querySelector('tbody tr').outerHTML);\r\n    html += f.replaceTemplate(this.tbody, data);\r\n    this.table.querySelector('tbody').innerHTML = html;\r\n  },\r\n\r\n  setPermission(data) {\r\n    this.permissionList = new Map();\r\n    data.forEach(i => this.permissionList.set(i['ID'], i));\r\n  },\r\n  // Заполнить статусы\r\n  fillPermission(data) {\r\n    let tmp = f.gT('#permission'), html  = '';\r\n\r\n    html += f.replaceTemplate(tmp, data);\r\n\r\n    f.gI('selectPermission').innerHTML = html;\r\n  },\r\n\r\n  query() {\r\n    Object.entries(this.queryParam).map(param => {\r\n      this.form.set(param[0], param[1]);\r\n    })\r\n\r\n    f.Post({data: this.form}).then(data => {\r\n\r\n      if(this.needReload) {\r\n        this.needReload = false;\r\n        this.selectedId = new Set();\r\n        this.queryParam.dbAction = 'loadUsers';\r\n        this.queryParam.usersId = '[]';\r\n        this.query();\r\n        return;\r\n      } else {\r\n        this.confirmMsg && f.showMsg(this.confirmMsg, data.status) && (this.confirmMsg = false);\r\n      }\r\n\r\n      if(data['permissionUsers']) { this.setPermission(data['permissionUsers']); this.fillPermission(data['permissionUsers']); }\r\n      if(data['users']) { this.setUsers(data['users']); this.fillTable(data['users']); }\r\n      if(data['countRows']) this.p.setCountPageBtn(data['countRows']);\r\n    });\r\n  },\r\n\r\n  // Events function\r\n  //--------------------------------------------------------------------------------------------------------------------\r\n\r\n  // кнопки открыть закрыть и т.д.\r\n  actionBtn(e) {\r\n    let target = e.target,\r\n        action = target.getAttribute('data-action'),\r\n        form;\r\n\r\n    if (['addUser', 'changeUser'].includes(action)) {\r\n      this.delayFunc = () => {\r\n        const f = new FormData(form), res = {};\r\n        for (const [k, v] of f.entries()) {\r\n          res[k] = v;\r\n        }\r\n        this.queryParam.authForm = JSON.stringify(res);\r\n      };\r\n    }\r\n\r\n    let select = {\r\n      'addUser': () => {\r\n        form = this.tmp.form.cloneNode(true);\r\n        form.querySelector('#changeField').remove();\r\n        this.confirmMsg = 'Новый пользователь добавлен';\r\n        this.M.show('Добавление пользователя', form);\r\n        f.maskInit(form.querySelector('[name=\"phone\"]'));\r\n      },\r\n      'changeUser': () => {\r\n        if (!this.id.getSelectedSize()) { f.showMsg('Выберите минимум 1 пользователя', 'error'); return; }\r\n\r\n        let oneElements = this.id.getSelectedSize() === 1, node,\r\n            id = this.id.getSelected(),\r\n            users = this.usersList.get(+id[0]);\r\n        form = this.tmp.form.cloneNode(true);\r\n\r\n        this.queryParam.usersId = JSON.stringify(id);\r\n\r\n        node = form.querySelector('[name=\"name\"]');\r\n        if (oneElements) node.value = users.name;\r\n        else node.parentNode.remove();\r\n\r\n        node = form.querySelector('[name=\"permissionId\"]');\r\n        if (oneElements) node.value = users['permissionId'];\r\n        else node.value = 1;\r\n\r\n        node = form.querySelector('[name=\"login\"]');\r\n        if (oneElements) node.value = users['login'];\r\n        else node.parentNode.remove();\r\n\r\n        form.querySelector('[name=\"password\"]').parentNode.remove();\r\n\r\n        node = form.querySelector('[name=\"phone\"]');\r\n        if (oneElements) node.value = users['phone'];\r\n        else node.parentNode.remove();\r\n\r\n        node = form.querySelector('[name=\"email\"]');\r\n        if (oneElements) node.value = users['email'];\r\n        else node.parentNode.remove();\r\n\r\n        node = form.querySelectorAll('.managerField');\r\n        if (oneElements) {\r\n          node.forEach(n => {\r\n            let input = n.querySelector('input[name], textarea[name]'),\r\n                name = input.name;\r\n\r\n            users[name] && (input.value = users[name]);\r\n          });\r\n        } else node.forEach(n => n.remove());\r\n\r\n        node = form.querySelector('[name=\"activity\"]');\r\n        node.checked = oneElements ? users.activityValue : true;\r\n\r\n        this.confirmMsg = 'Изменения сохранены';\r\n        this.M.show('Изменение пользователей', form);\r\n      },\r\n      'changeUserPassword': () => { // TODO доработать изменение пароля\r\n        if (this.id.getSelectedSize() !== 1) { f.showMsg('Выберите только одного пользователя', 'error'); return; }\r\n\r\n        let id   = this.id.getSelected(),\r\n            user = this.usersList.get(+id[0]),\r\n            form = f.gTNode('#userChangePassForm');\r\n\r\n        this.queryParam.usersId = JSON.stringify(id);\r\n\r\n        let newPass = form.querySelector('[name=\"newPass\"]'),\r\n            repeatPass = form.querySelector('[name=\"repeatPass\"]');\r\n\r\n        this.onEventNode(newPass, e => this.changeTextInput(e, repeatPass), {}, 'change');\r\n        this.onEventNode(repeatPass, e => this.changePassword(e, newPass), {}, 'change');\r\n\r\n        this.confirmMsg = 'Новый пароль сохранен';\r\n        this.M.show('Изменить пароль пользователя ' + user.name, form);\r\n      },\r\n      'delUser': () => {\r\n        if (!this.id.getSelectedSize()) return;\r\n\r\n        this.queryParam.usersId = JSON.stringify(this.id.getSelected());\r\n        this.delayFunc = () => this.id.clear();\r\n\r\n        this.confirmMsg = 'Удаление успешно';\r\n        this.M.show('Удалить', 'Удалить выбранных пользователя?');\r\n      },\r\n    }\r\n\r\n    if (action === 'confirmYes') { // Закрыть подтверждением\r\n      this.delayFunc();\r\n      this.delayFunc = () => {};\r\n      this.needReload = {dbAction: 'loadUsers'};\r\n      this.query();\r\n    } else if (action === 'confirmNo') {\r\n      this.reloadAction = false;\r\n    } else {\r\n      this.queryParam.dbAction = action;\r\n      select[action] && select[action]();\r\n    }\r\n  },\r\n\r\n  changeTextInput(e, repeatPass) {\r\n    if (e.target.value.length <= 2) e.target.value = '';\r\n    repeatPass.value = '';\r\n  },\r\n  changeCheckInput(e) {\r\n    this.queryParam[e.target.name] = e.target.checked;\r\n  },\r\n  changePassword(e, newPass) {\r\n    if (e.target.value !== newPass.value) {\r\n      e.target.value = newPass.value = '';\r\n      f.showMsg('Пароли не совпадают', 'error');\r\n      return;\r\n    }\r\n    this.queryParam['validPass'] = e.target.value;\r\n  },\r\n\r\n  // Bind events\r\n  //--------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * @param node\r\n   * @param func\r\n   * @param options\r\n   * @param eventType\r\n   */\r\n  onEventNode(node, func, options = {}, eventType = 'click') {\r\n    node.addEventListener(eventType, (e) => func.call(this, e), options);\r\n  },\r\n\r\n  onEvent() {\r\n    // Action buttons\r\n    f.qA('input[data-action]', 'click', (() => (e) => this.actionBtn.call(this, e))());\r\n  },\r\n}\r\n\r\nusers.init();\r\n"],"names":[],"sourceRoot":""}