{"version":3,"file":"js/module/customers.js","mappings":";;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,YAAY;AACZ,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,OAAO;AACP,MAAM;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,aAAa;AACb;AACA,YAAY;AACZ,UAAU;AACV,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,gBAAgB;AAC5B,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA,OAAO;AACP;AACA,qDAAqD,gCAAgC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sCAAsC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA,OAAO;AACP;AACA,gDAAgD,yCAAyC;AACzF;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,yBAAyB;AACzB;AACA;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,WAAW;AACnE,GAAG;AACH;AACA;AACA","sources":["webpack://my-webpack-project/./js/module/customers/customers.js"],"sourcesContent":["'use strict';\r\n\r\n// Customers list for search\r\nconst CustomersList = {\r\n  FD        : new FormData(),\r\n  data      : [],\r\n  searchData: Object.create(null),\r\n\r\n  getFormData() {\r\n    this.FD.set('mode', 'DB');\r\n    this.FD.set('dbAction', 'loadCustomers');\r\n    this.FD.set('countPerPage', '1000');\r\n  },\r\n\r\n  init() {\r\n    this.searchComponent.init({\r\n      popup: false,\r\n      node: this.node,\r\n      searchData: this.searchData,\r\n      showResult: this.showResult.bind(this),\r\n    });\r\n  },\r\n\r\n  setData(node) {\r\n    !this.node && (this.node = node);\r\n\r\n    this.node.addEventListener('input', this.inputSearch);\r\n    this.getFormData();\r\n    this.searchComponent = f.searchInit();\r\n\r\n    f.Post({data: this.FD}).then(data => {\r\n      data['customers'] && this.prepareSearchData(data['customers']);\r\n      this.init();\r\n    });\r\n  },\r\n\r\n  prepareSearchData(data) {\r\n    this.data = data.reduce((r, i) => {\r\n      let phone;\r\n      try { phone = JSON.parse(i['contacts'])['phone'].replace(/ |-|_|\\(|\\)|@/g, ''); }\r\n      catch { phone = ''; }\r\n\r\n      this.searchData[i['C.ID']] = i['name'] + i['ITN'] + phone;\r\n      r[i['C.ID']] = i;\r\n      return r;\r\n    }, Object.create(null));\r\n  },\r\n\r\n  showResult(node, resultIds) {\r\n    if (resultIds.length) {\r\n      f.setLoading(this.node);\r\n      //this.FD.set('search', '1');\r\n      this.FD.set('customerIds', JSON.stringify(resultIds));\r\n\r\n      f.Post({data: this.FD}).then(data => {\r\n        f.removeLoading(this.node);\r\n        if (data['customers']) customers.fillTable(data['customers'], true);\r\n      });\r\n    } else customers.fillTable([], true);\r\n  },\r\n\r\n  inputSearch(e) {\r\n    clearTimeout(this.delay);\r\n    this.delay = setTimeout(() => {\r\n      let value = e.target.value;\r\n\r\n      if (value.length < 2) {\r\n        customers.queryParam.dbAction = 'loadCustomers';\r\n        customers.query();\r\n      }\r\n    }, 300);\r\n  },\r\n}\r\n\r\nconst orders = {\r\n  data: Object.create(null),\r\n\r\n  /**\r\n   * @param id int\r\n   * @param data string\r\n   */\r\n  setData(id, data) {\r\n    if (!id) return;\r\n    this.data[id] = data.split(',');\r\n    return this;\r\n  },\r\n\r\n  getOrders(id) {\r\n    //this.data[id] ? this.data[id] : [];\r\n    let obj = this.data[id].reduce((r, i) => {\r\n      r.push({value: i});\r\n      return r;\r\n    }, []);\r\n\r\n    return f.replaceTemplate(this.ordersTmp, obj);\r\n  },\r\n\r\n  initTemplate() {\r\n    this.ordersTmp = f.gT('#tableOrdersNumbers');\r\n  },\r\n}\r\n\r\nconst customers = {\r\n  form: new FormData(),\r\n\r\n  needReload: false,\r\n  table: f.gI('customersTable'),\r\n  tbody: '',\r\n  impValue: '',\r\n  confirm: f.gI('confirmField'),\r\n\r\n  queryParam: {\r\n    dbAction    : 'loadCustomers',\r\n    sortColumn  : 'name',\r\n    sortDirect  : false, // true = DESC, false\r\n    currPage    : 0,\r\n    countPerPage: 20,\r\n    pageCount   : 0,\r\n  },\r\n\r\n  confirmMsg: false,\r\n\r\n  delayFunc: () => {},\r\n  //statusList: Object.create(null), // Типы доступов\r\n\r\n  usersList: new Map(),\r\n\r\n  init() {\r\n    this.M = f.initModal();\r\n    this.p = new f.Pagination( '#paginator',{\r\n      dbAction : 'loadCustomers',\r\n      query: this.query.bind(this),\r\n      sortParam: this.queryParam,\r\n    });\r\n    new f.SortColumns({\r\n      thead: this.table.querySelector('thead'),\r\n      query: this.query.bind(this),\r\n      dbAction : 'loadCustomers',\r\n      sortParam: this.queryParam,\r\n    });\r\n    this.selected = new f.SelectedRow({table: this.table});\r\n\r\n    this.query();\r\n\r\n    this.onEvent();\r\n  },\r\n\r\n  setUsers(data) {\r\n    this.usersList = new Map();\r\n    data.forEach(i => this.usersList.set(i.id, i));\r\n  },\r\n  fillTable(data, search = false) {\r\n    this.contValue || (this.contValue = f.gT('#tableContactsValue'));\r\n    this.searchMsg || (this.searchMsg = f.gT('#noFoundSearchMsg'));\r\n    this.orderBtn || (this.orderBtn = f.gT('#tableOrderBtn'));\r\n    data = data.map(item => {\r\n      if (item['contacts']) {\r\n        let value = '';\r\n\r\n        try {\r\n          value = JSON.parse(item['contacts']);\r\n          item['contactsParse'] = value;\r\n          if (Object.values(value).length) {\r\n            let arr = Object.entries(value).map(n => {\r\n              return {key: _(n[0]), value: n[1]}\r\n            });\r\n            value = f.replaceTemplate(this.contValue, arr);\r\n          } else value = '';\r\n        } catch (e) {\r\n          console.log(`Клиент ID: ${item.id} имеет не правильное значение`);\r\n        }\r\n        item['contacts'] = value;\r\n      }\r\n\r\n      /*if(true /!* TODO настройки вывода даты*!/) {\r\n        for (let i in item) {\r\n          if(i.includes('date')) {\r\n            item[i] = item[i].replace(/ |(\\d\\d:\\d\\d:\\d\\d)/g, '');\r\n          }\r\n        }\r\n      }*/\r\n\r\n      if (item['orders']) {\r\n        orders.setData(item.id, item['orders']);\r\n        item['orders'] = f.replaceTemplate(this.orderBtn, {id: item.id});\r\n      }\r\n\r\n      return item;\r\n    })\r\n\r\n    let html  = '';\r\n    this.tbody || (this.tbody = this.table.querySelector('tbody tr').outerHTML);\r\n    data.length && (html += f.replaceTemplate(this.tbody, data));\r\n    !data.length && search && (html = this.searchMsg);\r\n    this.table.querySelector('tbody').innerHTML = html;\r\n  },\r\n  checkCustomers() {\r\n    for (const id of this.selected.getSelected()) {\r\n      if (this.usersList.get(id).orders) {\r\n        f.showMsg(`У Клиента ${id} имеются заказы!`, 'error');\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n\r\n  query() {\r\n    Object.entries(this.queryParam).map(param => {\r\n      this.form.set(param[0], param[1].toString());\r\n    })\r\n\r\n    f.Post({data: this.form}).then(data => {\r\n      if (!data.status) { f.showMsg('Ошибка'); return; }\r\n\r\n      if (this.needReload) {\r\n        this.needReload = false;\r\n        this.queryParam.dbAction = 'loadCustomers';\r\n        this.queryParam.orderIds = '[]';\r\n        this.query();\r\n        return;\r\n      }\r\n\r\n      data.status && this.confirmMsg && f.showMsg(this.confirmMsg) && delete this.confirmMsg;\r\n\r\n      if(data['customers']) { this.setUsers(data['customers']); this.fillTable(data['customers']); }\r\n      if(data['countRows']) this.p.setCountPageBtn(data['countRows']);\r\n    });\r\n  },\r\n\r\n  // TODO events function\r\n  //--------------------------------------------------------------------------------------------------------------------\r\n\r\n  // кнопки открыть закрыть и т.д.\r\n  actionBtn(e) {\r\n    let target = e.target, form,\r\n        action = target.getAttribute('data-action');\r\n\r\n    if (!action) return;\r\n\r\n    if (['addCustomer', 'changeCustomer'].includes(action)) {\r\n      this.delayFunc = () => {\r\n        const f = new FormData(form), res = {};\r\n        for (const [k, v] of f.entries()) {\r\n          res[k] = v;\r\n        }\r\n        this.queryParam.authForm = JSON.stringify(res);\r\n      };\r\n    }\r\n\r\n    let select = {\r\n      'addCustomer': () => {\r\n        form = f.gTNode('#customerForm');\r\n\r\n        ['name', 'phone', 'email', 'address', 'ITN'].map(i => {\r\n          let node = form.querySelector(`[name=\"${i}\"]`);\r\n          i === 'phone' && f.maskInit(node, '+375 (__) ___ __ __');\r\n          i === 'ITN' && f.maskInit(node, '_________');\r\n        });\r\n\r\n        this.confirmMsg = 'Клиент добавлен';\r\n        this.M.btnConfig('confirmYes', {value: 'Подтвердить'});\r\n        this.M.show('Добавление пользователя', form);\r\n        f.relatedOption(form);\r\n      },\r\n      'changeCustomer': () => {\r\n        if (this.selected.getSelectedSize() !== 1) { f.showMsg('Выберите клиента!'); return; }\r\n\r\n        let node,\r\n            id = this.selected.getSelected(),\r\n            customer = this.usersList.get(id[0]);\r\n\r\n        form = f.gTNode('#customerForm');\r\n\r\n        this.queryParam.customerId = id[0];\r\n        node = form.querySelector('[name=\"name\"]');\r\n        node.value = customer['name'];\r\n\r\n        // Contacts\r\n        let {phone = '', email = '', address = ''} = customer['contactsParse'];\r\n\r\n        node = form.querySelector(`[name=\"phone\"]`);\r\n        f.maskInit(node, '+375 (__) ___ __ __');\r\n        node.value = phone;\r\n\r\n        node = form.querySelector(`[name=\"email\"]`);\r\n        node.value = email;\r\n\r\n        node = form.querySelector(`[name=\"address\"]`);\r\n        node.value = address;\r\n\r\n        node = form.querySelector(`[name=\"ITN\"]`);\r\n        f.maskInit(node, '_________');\r\n        node.value = customer['ITN'];\r\n\r\n        this.confirmMsg = 'Изменения сохранены';\r\n        this.M.btnConfig('confirmYes', {value: 'Подтвердить'});\r\n        this.M.show('Изменение клиента', form);\r\n        f.relatedOption(form);\r\n      },\r\n      'delCustomer': () => {\r\n        if (!this.selected.getSelectedSize()) { f.showMsg('Выберите клиента!', 'error'); return; }\r\n        if (this.checkCustomers()) return;\r\n\r\n        this.queryParam.customerId = JSON.stringify(this.selected.getSelected());\r\n\r\n        this.confirmMsg = 'Успешно удалено';\r\n        this.M.btnConfig('confirmYes', {value: 'Подтвердить'});\r\n        this.M.show('Удалить', 'Удалить выбранных клиентов?');\r\n\r\n        this.delayFunc = () => this.selected.clear();\r\n      },\r\n      'openOrders': () => {\r\n        let id = target.dataset.id,\r\n            div = document.createElement('div');\r\n\r\n        orders.ordersTmp || orders.initTemplate();\r\n        div.innerHTML = orders.getOrders(id);\r\n\r\n        this.M.btnConfig('confirmYes', {value: 'Открыть'});\r\n        this.M.show('Заказы', div);\r\n\r\n        this.delayFunc = () => {\r\n          let checked = div.querySelector('input:checked');\r\n          if (!checked) return;\r\n\r\n          let link = f.gI(f.ID.PUBLIC_PAGE);\r\n          link.href += '?orderId=' + checked.value;\r\n          link.click();\r\n        };\r\n      }\r\n    }\r\n\r\n    if(action === 'confirmYes') { // Закрыть подтверждение\r\n      this.delayFunc();\r\n      this.delayFunc = () => {};\r\n      this.needReload = {dbAction: 'loadCustomers'};\r\n      this.query();\r\n\r\n    } else { // Открыть подтверждение\r\n      this.queryParam.dbAction = action;\r\n      select[action] && select[action]();\r\n    }\r\n  },\r\n\r\n  focusSearch(e) {\r\n    CustomersList.setData(e.target);\r\n  },\r\n\r\n  // Bind events\r\n  //--------------------------------------------------------------------------------------------------------------------\r\n\r\n  /**\r\n   * @param node\r\n   * @param func\r\n   * @param options\r\n   * @param eventType\r\n   */\r\n  onEventNode(node, func, options = {}, eventType = 'click') {\r\n    node.addEventListener(eventType, (e) => func.call(this, e), options);\r\n  },\r\n\r\n  onEvent() {\r\n    // Action buttons\r\n    f.qA('input[data-action]', 'click', e => this.actionBtn(e));\r\n    // Click show orders\r\n    this.table.addEventListener('click', e => this.actionBtn(e));\r\n\r\n    // Focus Search Init\r\n    this.onEventNode(f.gI('search'), this.focusSearch, {once: true}, 'focus');\r\n  },\r\n}\r\n\r\ncustomers.init();\r\n"],"names":[],"sourceRoot":""}